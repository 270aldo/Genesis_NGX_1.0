name: Code Quality & Security

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  POETRY_VERSION: '1.8.3'

jobs:
  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarCloud

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      uses: actions/cache@v4
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}

    - name: Install backend dependencies
      working-directory: backend
      run: poetry install --no-interaction --no-root --with dev,test

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run backend quality checks
      working-directory: backend
      run: |
        # Code formatting check
        poetry run black --check --diff core clients agents tools app

        # Import sorting check
        poetry run isort --check-only --diff core clients agents tools app

        # Linting with detailed output
        poetry run ruff check core clients agents tools app --output-format=github

        # Type checking with detailed output
        poetry run mypy core clients agents tools app --show-error-codes

    - name: Run frontend quality checks
      working-directory: frontend
      run: |
        # Linting
        npm run lint

        # Type checking
        npx tsc --noEmit

        # Build check
        npm run build

    - name: Run security audit
      working-directory: backend
      run: |
        # Python security check
        poetry run safety check --json --output safety-report.json || true

    - name: Run frontend security audit
      working-directory: frontend
      run: |
        # Node.js security audit
        npm audit --audit-level=high --json > npm-audit.json || true

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.sources=backend/,frontend/src/
          -Dsonar.tests=backend/tests/,frontend/src/
          -Dsonar.python.coverage.reportPaths=backend/coverage.xml
          -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          frontend/npm-audit.json

  # Dependency Analysis
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check for outdated Python packages
      working-directory: backend
      run: |
        poetry show --outdated --format json > outdated-python.json || true

        echo "## Outdated Python Packages" >> $GITHUB_STEP_SUMMARY
        if [ -s outdated-python.json ]; then
          echo "Found outdated packages:" >> $GITHUB_STEP_SUMMARY
          cat outdated-python.json >> $GITHUB_STEP_SUMMARY
        else
          echo "All packages are up to date!" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check for outdated Node.js packages
      working-directory: frontend
      run: |
        npm outdated --json > outdated-node.json || true

        echo "## Outdated Node.js Packages" >> $GITHUB_STEP_SUMMARY
        if [ -s outdated-node.json ]; then
          echo "Found outdated packages:" >> $GITHUB_STEP_SUMMARY
          cat outdated-node.json >> $GITHUB_STEP_SUMMARY
        else
          echo "All packages are up to date!" >> $GITHUB_STEP_SUMMARY
        fi

    - name: License compatibility check
      run: |
        # Check for license conflicts
        pip install pip-licenses
        pip-licenses --format=json --output-file=backend-licenses.json --with-system

        echo "## License Analysis" >> $GITHUB_STEP_SUMMARY
        echo "Backend license report generated." >> $GITHUB_STEP_SUMMARY

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          backend/outdated-python.json
          frontend/outdated-node.json
          backend-licenses.json

  # Performance Benchmarks
  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      working-directory: backend
      run: poetry install --no-interaction --no-root --with dev,test

    - name: Set up test environment
      working-directory: backend
      run: |
        echo "ENVIRONMENT=test" > .env
        echo "REDIS_URL=redis://localhost:6379" >> .env

    - name: Run performance benchmarks
      working-directory: backend
      run: |
        poetry run pytest tests/ -m "not agents" \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          --benchmark-min-rounds=5 \
          --benchmark-max-time=300

    - name: Analyze benchmark results
      working-directory: backend
      run: |
        python -c "
        import json

        with open('benchmark-results.json') as f:
            results = json.load(f)

        print('## Performance Benchmark Results', file=open('benchmark-summary.md', 'w'))
        print('', file=open('benchmark-summary.md', 'a'))

        for benchmark in results['benchmarks']:
            name = benchmark['name']
            mean = benchmark['stats']['mean']
            stddev = benchmark['stats']['stddev']
            print(f'- **{name}**: {mean:.4f}s Â± {stddev:.4f}s', file=open('benchmark-summary.md', 'a'))
        "

    - name: Comment benchmark results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('backend/benchmark-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          backend/benchmark-results.json
          backend/benchmark-summary.md

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Run Trivy config scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        format: 'sarif'
        output: 'trivy-config-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: '.'

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/javascript
        generateSarif: "1"

    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  # Test Coverage Analysis
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      working-directory: backend
      run: poetry install --no-interaction --no-root --with dev,test

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Set up test environment
      working-directory: backend
      run: |
        echo "ENVIRONMENT=test" > .env
        echo "REDIS_URL=redis://localhost:6379" >> .env

    - name: Run backend tests with coverage
      working-directory: backend
      run: |
        poetry run pytest \
          --cov=core --cov=clients --cov=agents --cov=tools --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-branch \
          --cov-fail-under=80

    - name: Run frontend tests with coverage
      working-directory: frontend
      run: |
        npm run test:coverage

    - name: Generate coverage summary
      run: |
        echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Backend coverage
        BACKEND_COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('backend/coverage.xml')
        root = tree.getroot()
        total_lines = int(root.attrib['lines-valid'])
        covered_lines = int(root.attrib['lines-covered'])
        coverage = (covered_lines / total_lines) * 100
        print(f'{coverage:.2f}')
        ")

        echo "### Backend Coverage: ${BACKEND_COVERAGE}%" >> $GITHUB_STEP_SUMMARY

        # Frontend coverage (if lcov.info exists)
        if [ -f frontend/coverage/lcov.info ]; then
          FRONTEND_COVERAGE=$(node -e "
            const fs = require('fs');
            const lcov = fs.readFileSync('frontend/coverage/lcov.info', 'utf8');
            const lines = lcov.match(/LF:(\d+)/g) || [];
            const hits = lcov.match(/LH:(\d+)/g) || [];
            const totalLines = lines.reduce((sum, l) => sum + parseInt(l.split(':')[1]), 0);
            const hitLines = hits.reduce((sum, h) => sum + parseInt(h.split(':')[1]), 0);
            const coverage = (hitLines / totalLines) * 100;
            console.log(coverage.toFixed(2));
          ")
          echo "### Frontend Coverage: ${FRONTEND_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: backend/coverage.xml,frontend/coverage/lcov.info
        flags: quality-check
        name: quality-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          backend/htmlcov/
          backend/coverage.xml
          frontend/coverage/

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-check, security-scan, coverage-analysis]
    if: always()

    steps:
    - name: Check quality gate status
      run: |
        echo "## Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.code-quality.result }}" = "success" ]; then
          echo "â Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "â Code Quality: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.dependency-check.result }}" = "success" ]; then
          echo "â Dependency Check: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "â Dependency Check: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "â Security Scan: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "â Security Scan: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.coverage-analysis.result }}" = "success" ]; then
          echo "â Coverage Analysis: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "â Coverage Analysis: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Fail if quality gate not met
      if: needs.code-quality.result != 'success' || needs.security-scan.result != 'success' || needs.coverage-analysis.result != 'success'
      run: |
        echo "Quality gate failed. Check the individual job results."
        exit 1

    - name: Notify on failure
      if: failure() && (github.event_name == 'schedule' || github.event_name == 'push')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ð¨ Quality gate failed for ${{ github.repository }}!
          Branch: ${{ github.ref }}
          Trigger: ${{ github.event_name }}
          Please check the workflow results.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
