name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/genesis-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/genesis-frontend
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi

        # Save multiline output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.changelog }}

          ## Deployment Notes
          - Backend: Docker image `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version.outputs.version }}`
          - Frontend: Docker image `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version.outputs.version }}`

          ## Test Results
          - All CI/CD tests passed
          - Security scans completed
          - Performance benchmarks within acceptable limits
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: backend
        file: backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: frontend
        dockerfile: frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          NODE_ENV=production

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: '.'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Staging
      run: |
        export KUBECONFIG=kubeconfig

        # Update image tags in Kubernetes manifests
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/services/api.yaml
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/services/a2a-server.yaml

        # Apply Kubernetes manifests
        kubectl apply -f k8s/base/
        kubectl apply -f k8s/services/
        kubectl apply -f k8s/agents/

        # Wait for rollout to complete
        kubectl rollout status deployment/genesis-api -n genesis-staging --timeout=300s
        kubectl rollout status deployment/genesis-a2a -n genesis-staging --timeout=300s

    - name: Run smoke tests on staging
      run: |
        # Wait for services to be ready
        sleep 30

        # Basic health check
        curl -f https://staging-api.genesis.ngx.com/health || exit 1

        # Agent availability check
        curl -f https://staging-api.genesis.ngx.com/agents/health || exit 1

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Staging deployment ${{ job.status }}!
          Version: ${{ github.sha }}
          Environment: staging
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test, deploy-staging]
    if: (startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Production
      run: |
        export KUBECONFIG=kubeconfig

        # Get version tag
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION_TAG="${{ github.event.inputs.version }}"
        else
          VERSION_TAG="${GITHUB_REF#refs/tags/}"
        fi

        # Update image tags in Kubernetes manifests
        sed -i "s|IMAGE_TAG|$VERSION_TAG|g" k8s/services/api.yaml
        sed -i "s|IMAGE_TAG|$VERSION_TAG|g" k8s/services/a2a-server.yaml

        # Apply Kubernetes manifests with rolling update strategy
        kubectl apply -f k8s/base/
        kubectl apply -f k8s/services/
        kubectl apply -f k8s/agents/

        # Wait for rollout to complete
        kubectl rollout status deployment/genesis-api -n genesis-production --timeout=600s
        kubectl rollout status deployment/genesis-a2a -n genesis-production --timeout=600s

    - name: Run production smoke tests
      run: |
        # Wait for services to be ready
        sleep 60

        # Comprehensive health check
        curl -f https://api.genesis.ngx.com/health || exit 1
        curl -f https://api.genesis.ngx.com/agents/health || exit 1

        # Performance check - response time should be under 2s
        RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" https://api.genesis.ngx.com/health)
        if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
          echo "Response time too high: $RESPONSE_TIME seconds"
          exit 1
        fi

    - name: Create deployment record
      run: |
        # Record deployment in monitoring system
        curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{
            "service": "genesis",
            "version": "'${VERSION_TAG:-${{ github.sha }}}'",
            "environment": "production",
            "deployed_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "deployed_by": "${{ github.actor }}"
          }'

    - name: Notify production deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Production deployment ${{ job.status }}!
          Version: ${{ needs.create-release.outputs.version || github.event.inputs.version }}
          Environment: production
          Deployed by: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()

    steps:
    - name: Wait and monitor
      run: |
        echo "Monitoring deployment for 10 minutes..."
        sleep 600

    - name: Check system health
      run: |
        # Check API health
        curl -f https://api.genesis.ngx.com/health || exit 1

        # Check metrics endpoint
        curl -f https://api.genesis.ngx.com/metrics || exit 1

        # Check error rates (should be < 1%)
        ERROR_RATE=$(curl -s "https://api.genesis.ngx.com/metrics" | grep 'http_requests_total{status="5' | tail -1 | cut -d' ' -f2)
        if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
          echo "Error rate too high: $ERROR_RATE"
          exit 1
        fi

    - name: Alert if issues detected
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          🚨 Post-deployment issues detected in production!
          Version: ${{ needs.create-release.outputs.version }}
          Please investigate immediately.
        webhook_url: ${{ secrets.SLACK_WEBHOOK_CRITICAL }}
