diff --git a/backend/core/settings.py b/backend/core/settings.py
index 1234567..abcdefg 100644
--- a/backend/core/settings.py
+++ b/backend/core/settings.py
@@ -171,5 +171,8 @@ class Settings(BaseSettings):
 
 
 # Instancia global de la configuración
-settings = Settings()
+# REMOVED: This causes hanging during import
+# settings = Settings()
+# 
+# Use lazy initialization instead - import from core.settings_lazy
 
diff --git a/backend/clients/vertex_ai/client.py b/backend/clients/vertex_ai/client.py
index 1234567..abcdefg 100644
--- a/backend/clients/vertex_ai/client.py
+++ b/backend/clients/vertex_ai/client.py
@@ -1625,19 +1625,23 @@ class VertexAIClient:
 
 
 # Instancia global del cliente con configuración optimizada
-vertex_ai_client = VertexAIClient(
-    # Configuración básica
-    use_redis_cache=os.environ.get("USE_REDIS_CACHE", "false").lower() == "true",
-    redis_url=os.environ.get("REDIS_URL"),
-    cache_ttl=get_env_int("VERTEX_CACHE_TTL", 3600),
-    max_cache_size=get_env_int("VERTEX_MAX_CACHE_SIZE", 1000),
-    max_connections=get_env_int("VERTEX_MAX_CONNECTIONS", 10),
-    # Configuración avanzada de caché (optimizada según pruebas)
-    cache_policy="lru",  # LRU mostró el mejor rendimiento en pruebas
-    cache_partitions=get_env_int("VERTEX_CACHE_PARTITIONS", 4),
-    l1_size_ratio=float(os.environ.get("VERTEX_L1_SIZE_RATIO", "0.3")),
-    prefetch_threshold=float(os.environ.get("VERTEX_PREFETCH_THRESHOLD", "0.7")),
-    compression_threshold=get_env_int("VERTEX_COMPRESSION_THRESHOLD", 1024),
-    compression_level=get_env_int("VERTEX_COMPRESSION_LEVEL", 6),
-)
+# REMOVED: This causes hanging during import
+# Use lazy initialization instead
+from core.lazy_init import LazyInstance
+
+def _create_vertex_ai_client():
+    return VertexAIClient(
+        use_redis_cache=os.environ.get("USE_REDIS_CACHE", "false").lower() == "true",
+        redis_url=os.environ.get("REDIS_URL"),
+        cache_ttl=get_env_int("VERTEX_CACHE_TTL", 3600),
+        max_cache_size=get_env_int("VERTEX_MAX_CACHE_SIZE", 1000),
+        max_connections=get_env_int("VERTEX_MAX_CONNECTIONS", 10),
+        cache_policy="lru",
+        cache_partitions=get_env_int("VERTEX_CACHE_PARTITIONS", 4),
+        l1_size_ratio=float(os.environ.get("VERTEX_L1_SIZE_RATIO", "0.3")),
+        prefetch_threshold=float(os.environ.get("VERTEX_PREFETCH_THRESHOLD", "0.7")),
+        compression_threshold=get_env_int("VERTEX_COMPRESSION_THRESHOLD", 1024),
+        compression_level=get_env_int("VERTEX_COMPRESSION_LEVEL", 6),
+    )
 
+vertex_ai_client = LazyInstance(_create_vertex_ai_client, "VertexAIClient")
diff --git a/backend/core/redis_pool.py b/backend/core/redis_pool.py
index 1234567..abcdefg 100644
--- a/backend/core/redis_pool.py
+++ b/backend/core/redis_pool.py
@@ -238,7 +238,10 @@ class RedisPoolManager:
 
 
 # Global instance
-redis_pool_manager = RedisPoolManager()
+# REMOVED: This causes hanging during import
+# Use lazy initialization instead
+from core.lazy_init import LazyInstance
+redis_pool_manager = LazyInstance(RedisPoolManager, "RedisPoolManager")
 
 
 # Convenience functions
diff --git a/backend/infrastructure/a2a_optimized.py b/backend/infrastructure/a2a_optimized.py
index 1234567..abcdefg 100644
--- a/backend/infrastructure/a2a_optimized.py
+++ b/backend/infrastructure/a2a_optimized.py
@@ -763,5 +763,8 @@ class A2AServer:
 
 
 # Crear instancia global
-a2a_server = A2AServer()
+# REMOVED: This causes hanging during import
+# Use lazy initialization instead
+from core.lazy_init import LazyInstance
+a2a_server = LazyInstance(A2AServer, "A2AServer")
 
diff --git a/backend/infrastructure/adapters/a2a_adapter.py b/backend/infrastructure/adapters/a2a_adapter.py
index 1234567..abcdefg 100644
--- a/backend/infrastructure/adapters/a2a_adapter.py
+++ b/backend/infrastructure/adapters/a2a_adapter.py
@@ -296,7 +296,10 @@ class A2AAdapter:
 
 
 # Instancia global del adaptador
-a2a_adapter = A2AAdapter()
+# REMOVED: This causes hanging during import
+# Use lazy initialization instead
+from core.lazy_init import LazyInstance
+a2a_adapter = LazyInstance(A2AAdapter, "A2AAdapter")
 
 # Funciones de compatibilidad para reemplazar las del antiguo servidor
 
diff --git a/backend/agents/orchestrator/config.py b/backend/agents/orchestrator/config.py
index 1234567..abcdefg 100644
--- a/backend/agents/orchestrator/config.py
+++ b/backend/agents/orchestrator/config.py
@@ -8,9 +8,13 @@ Central configuration for the NEXUS orchestrator agent.
 from typing import Dict, List, Optional
 from pydantic import BaseModel, Field
-from core.settings import Settings
 
-settings = Settings()
+# Use lazy-initialized settings to prevent hanging
+try:
+    from core.settings_lazy import settings
+except ImportError:
+    from core.settings import Settings
+    settings = Settings()
 
 
 class OrchestratorConfig(BaseModel):