"""
Vulnerability Scan Skill
=======================

Detects and analyzes system vulnerabilities.
"""

from typing import Dict, Any, List
from core.logging_config import get_logger

logger = get_logger(__name__)


class VulnerabilityScanSkill:
    """Skill for vulnerability scanning and analysis."""
    
    def __init__(self, agent):
        """Initialize skill with parent agent reference."""
        self.agent = agent
        self.name = "vulnerability_scan"
        self.description = "Scan and analyze vulnerabilities"
    
    async def execute(self, request: Dict[str, Any]) -> Dict[str, Any]:
        """
        Perform vulnerability scan.
        
        Args:
            request: Contains target, scan_type, scope
            
        Returns:
            Vulnerability scan report
        """
        try:
            scan_data = {
                "target": request.get("target", {}),
                "scan_type": request.get("scan_type", "comprehensive"),
                "scope": request.get("scope", "full"),
                "include_cves": request.get("include_cves", True)
            }
            
            # Use agent's prompts system
            prompt = self.agent.prompts.get_vulnerability_scan_prompt(scan_data)
            
            # Generate vulnerability analysis
            response = await self.agent.generate_response(prompt)
            
            # Extract vulnerabilities
            vulnerabilities = self._extract_vulnerabilities(response)
            
            return {
                "success": True,
                "scan_report": response,
                "skill_used": "vulnerability_scan",
                "data": {
                    "vulnerabilities_found": len(vulnerabilities),
                    "severity_breakdown": self._severity_breakdown(vulnerabilities),
                    "scan_type": scan_data["scan_type"],
                    "exploitability_score": self._calculate_exploitability(vulnerabilities)
                },
                "metadata": {
                    "confidence": 0.87,
                    "scan_depth": "comprehensive",
                    "cvss_version": "3.1"
                }
            }
            
        except Exception as e:
            logger.error(f"Error in vulnerability scan: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "skill_used": "vulnerability_scan"
            }
    
    def _extract_vulnerabilities(self, report: str) -> List[Dict[str, Any]]:
        """Extract vulnerabilities from scan report."""
        # Simplified vulnerability extraction
        vuln_types = [
            {"type": "sql_injection", "severity": "critical"},
            {"type": "xss", "severity": "high"},
            {"type": "csrf", "severity": "medium"},
            {"type": "outdated_dependency", "severity": "medium"},
            {"type": "weak_encryption", "severity": "high"},
            {"type": "misconfiguration", "severity": "low"}
        ]
        
        found_vulns = []
        report_lower = report.lower()
        
        for vuln in vuln_types:
            if vuln["type"].replace("_", " ") in report_lower:
                found_vulns.append(vuln)
        
        return found_vulns
    
    def _severity_breakdown(self, vulnerabilities: List[Dict[str, Any]]) -> Dict[str, int]:
        """Break down vulnerabilities by severity."""
        breakdown = {"critical": 0, "high": 0, "medium": 0, "low": 0}
        
        for vuln in vulnerabilities:
            severity = vuln.get("severity", "low")
            breakdown[severity] = breakdown.get(severity, 0) + 1
        
        return breakdown
    
    def _calculate_exploitability(self, vulnerabilities: List[Dict[str, Any]]) -> float:
        """Calculate overall exploitability score."""
        if not vulnerabilities:
            return 0.0
        
        severity_weights = {
            "critical": 1.0,
            "high": 0.7,
            "medium": 0.4,
            "low": 0.1
        }
        
        total_score = 0
        for vuln in vulnerabilities:
            severity = vuln.get("severity", "low")
            total_score += severity_weights.get(severity, 0.1)
        
        # Normalize to 0-1 range
        return min(total_score / len(vulnerabilities), 1.0)