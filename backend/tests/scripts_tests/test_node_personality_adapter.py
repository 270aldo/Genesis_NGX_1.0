#!/usr/bin/env python3
"""
Test script para PersonalityAdapter de NODE (Systems Integration Ops).

Prueba las adaptaciones de personalidad para diferentes tipos de programa:
- NGX PRIME: Orquestador t√©cnico ejecutivo
- NGX LONGEVITY: Orquestador t√©cnico emp√°tico
"""

import asyncio
import os
import sys

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from agents.node_systems_integration_ops.agent import SystemsIntegrationOps
from core.personality.personality_adapter import PersonalityProfile


async def test_node_personality_adaptations():
    """
    Prueba las adaptaciones de personalidad del agente NODE.
    """
    print("üîß Iniciando pruebas de PersonalityAdapter para NODE")
    print("=" * 70)

    try:
        # Inicializar el agente NODE
        node = SystemsIntegrationOps()

        # Mensaje t√©cnico base para probar adaptaciones
        base_technical_message = """
        Te recomiendo implementar la siguiente integraci√≥n para conectar tu aplicaci√≥n:
        
        1. Configurar la API de integraci√≥n con autenticaci√≥n OAuth2
        2. Puedes implementar un sistema de automatizaci√≥n para sincronizar datos
        3. Ser√≠a bueno establecer un pipeline de datos para procesar informaci√≥n
        4. Configurar monitoreo y alertas para detectar problemas t√©cnicos
        5. Implementar una soluci√≥n de fallback para garantizar disponibilidad
        
        Para troubleshooting, necesitamos hacer debugging del sistema actual.
        Este problema t√©cnico requiere una soluci√≥n robusta y escalable.
        """

        print("üìù Mensaje t√©cnico base:")
        print("-" * 50)
        print(base_technical_message)
        print()

        # Test 1: Adaptaci√≥n para NGX PRIME (Ejecutivos)
        print("üî∑ TEST 1: Adaptaci√≥n para NGX PRIME (Ejecutivos)")
        print("-" * 50)

        prime_context = {
            "program_type": "PRIME",
            "user_query": "Necesitamos optimizar la arquitectura de sistemas de la empresa",
            "preferences": {
                "communication_style": "technical_executive",
                "detail_level": "high_level",
            },
            "emotional_state": "focused",
        }

        prime_adapted = await node._apply_personality_adaptation(
            base_technical_message, prime_context
        )

        print("Respuesta adaptada para PRIME:")
        print(prime_adapted)
        print()

        # Test 2: Adaptaci√≥n para NGX LONGEVITY (Bienestar)
        print("üî∂ TEST 2: Adaptaci√≥n para NGX LONGEVITY (Bienestar)")
        print("-" * 50)

        longevity_context = {
            "program_type": "LONGEVITY",
            "user_query": "¬øC√≥mo puedo conectar mis aplicaciones de salud?",
            "preferences": {
                "communication_style": "supportive",
                "detail_level": "step_by_step",
            },
            "emotional_state": "curious",
        }

        longevity_adapted = await node._apply_personality_adaptation(
            base_technical_message, longevity_context
        )

        print("Respuesta adaptada para LONGEVITY:")
        print(longevity_adapted)
        print()

        # Test 3: Comparaci√≥n directa de adaptaciones espec√≠ficas
        print("üîç TEST 3: Comparaci√≥n de adaptaciones espec√≠ficas")
        print("-" * 50)

        test_message = "Te recomiendo hacer una integraci√≥n autom√°tica del sistema. Este problema t√©cnico requiere una soluci√≥n de debugging."

        print("Mensaje original:")
        print(f"'{test_message}'")
        print()

        prime_specific = node._apply_node_prime_adaptations(test_message)
        print("üî∑ PRIME (Ejecutivo):")
        print(f"'{prime_specific}'")
        print()

        longevity_specific = node._apply_node_longevity_adaptations(test_message)
        print("üî∂ LONGEVITY (Bienestar):")
        print(f"'{longevity_specific}'")
        print()

        # Test 4: Simulaci√≥n de contextos de troubleshooting
        print("üîß TEST 4: Contextos de troubleshooting t√©cnico")
        print("-" * 50)

        troubleshooting_message = "Necesitamos hacer debugging del API que no responde. Te recomiendo revisar la configuraci√≥n del sistema para encontrar la soluci√≥n al problema t√©cnico."

        print("Mensaje de troubleshooting original:")
        print(troubleshooting_message)
        print()

        # PRIME - Troubleshooting ejecutivo
        prime_troubleshooting_context = {
            "program_type": "PRIME",
            "user_query": "El sistema empresarial est√° fallando, necesitamos soluci√≥n urgente",
            "preferences": {"focus": "business_impact", "urgency": "high"},
        }

        prime_troubleshooting = await node._apply_personality_adaptation(
            troubleshooting_message, prime_troubleshooting_context
        )

        print("üî∑ PRIME - Troubleshooting ejecutivo:")
        print(prime_troubleshooting)
        print()

        # LONGEVITY - Soporte emp√°tico
        longevity_troubleshooting_context = {
            "program_type": "LONGEVITY",
            "user_query": "Mi aplicaci√≥n no funciona bien, ¬øme puedes ayudar?",
            "preferences": {"focus": "learning", "patience": "high"},
        }

        longevity_troubleshooting = await node._apply_personality_adaptation(
            troubleshooting_message, longevity_troubleshooting_context
        )

        print("üî∂ LONGEVITY - Soporte emp√°tico:")
        print(longevity_troubleshooting)
        print()

        # Test 5: An√°lisis de vocabulario t√©cnico
        print("üí¨ TEST 5: Transformaci√≥n de vocabulario t√©cnico")
        print("-" * 50)

        technical_terms = [
            "Necesitamos una integraci√≥n de API completa",
            "La automatizaci√≥n del sistema requiere debugging",
            "Este problema t√©cnico necesita una soluci√≥n arquitectural",
            "Puedes implementar un setup de configuraci√≥n avanzada",
        ]

        for i, term in enumerate(technical_terms, 1):
            print(f"\nüìù T√©rmino {i}: {term}")

            print("\nüî∑ PRIME:")
            prime_result = node._apply_node_prime_adaptations(term)
            print(prime_result)

            print("\nüî∂ LONGEVITY:")
            longevity_result = node._apply_node_longevity_adaptations(term)
            print(longevity_result)
            print("-" * 30)

        # Test 6: An√°lisis de caracter√≠sticas de personalidad
        print("\nüß† TEST 6: Caracter√≠sticas de personalidad NODE")
        print("-" * 50)

        print("NODE - The Technical Orchestrator (ENTP)")
        print("‚Ä¢ Personalidad: ENTP - The Innovator, ingeniero brillante")
        print("‚Ä¢ Voz: R√°pida y eficiente")
        print("‚Ä¢ PRIME: Orquestador T√©cnico Ejecutivo")
        print("  - Troubleshooting de alto nivel")
        print("  - An√°lisis arquitectural empresarial")
        print("  - ROI tecnol√≥gico y escalabilidad")
        print("‚Ä¢ LONGEVITY: Orquestador T√©cnico Emp√°tico")
        print("  - Soporte t√©cnico paciente")
        print("  - Explicaciones accesibles")
        print("  - Gu√≠a paso a paso emp√°tica")
        print()

        print("‚úÖ Pruebas de PersonalityAdapter para NODE completadas exitosamente!")
        print("=" * 70)

    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback

        traceback.print_exc()


def test_node_adaptations_sync():
    """
    Prueba s√≠ncrona de las adaptaciones espec√≠ficas de NODE.
    """
    print("üîß Pruebas s√≠ncronas de adaptaciones espec√≠ficas")
    print("-" * 50)

    try:
        node = SystemsIntegrationOps()

        # Mensajes de prueba espec√≠ficos para NODE
        test_messages = [
            "Te recomiendo configurar la integraci√≥n con OAuth2 para mayor seguridad.",
            "Puedes implementar automatizaci√≥n para reducir el trabajo manual en el sistema.",
            "Ser√≠a bueno hacer debugging del API para identificar el problema t√©cnico.",
            "La soluci√≥n requiere arquitectura escalable y monitoreo en tiempo real.",
        ]

        for i, message in enumerate(test_messages, 1):
            print(f"\nüìù Mensaje {i}: {message}")

            print("\nüî∑ PRIME:")
            prime_result = node._apply_node_prime_adaptations(message)
            print(prime_result)

            print("\nüî∂ LONGEVITY:")
            longevity_result = node._apply_node_longevity_adaptations(message)
            print(longevity_result)
            print("-" * 30)

    except Exception as e:
        print(f"‚ùå Error en pruebas s√≠ncronas: {e}")


def test_node_technical_language_transformation():
    """
    Prueba espec√≠fica para la transformaci√≥n de lenguaje t√©cnico de NODE.
    """
    print("üó£Ô∏è Pruebas de transformaci√≥n de lenguaje t√©cnico")
    print("-" * 50)

    try:
        node = SystemsIntegrationOps()

        # T√©rminos t√©cnicos espec√≠ficos de NODE
        technical_phrases = {
            "troubleshooting": "resoluci√≥n de problemas",
            "debugging": "encontrar y corregir errores",
            "integraci√≥n": "conexi√≥n entre aplicaciones",
            "automatizaci√≥n": "tareas autom√°ticas",
            "problema t√©cnico": "desaf√≠o t√©cnico",
            "arquitectura empresarial": "dise√±o de sistemas",
            "API": "interfaz de programaci√≥n",
        }

        base_message = "Necesitamos troubleshooting del API con debugging de la integraci√≥n autom√°tica para resolver este problema t√©cnico de arquitectura empresarial."

        print(f"Mensaje original: {base_message}")
        print()

        print("üî∑ PRIME - Mantiene vocabulario t√©cnico ejecutivo:")
        prime_result = node._apply_node_prime_adaptations(base_message)
        print(prime_result)
        print()

        print("üî∂ LONGEVITY - Transforma a lenguaje accesible:")
        longevity_result = node._apply_node_longevity_adaptations(base_message)
        print(longevity_result)
        print()

        print("üìä An√°lisis de transformaciones aplicadas:")
        for technical, friendly in technical_phrases.items():
            if technical in base_message.lower():
                print(f"  ‚Ä¢ '{technical}' ‚Üí '{friendly}' (en LONGEVITY)")

    except Exception as e:
        print(f"‚ùå Error en pruebas de transformaci√≥n: {e}")


if __name__ == "__main__":
    print("üîß NODE PersonalityAdapter Test Suite")
    print("=" * 70)

    # Ejecutar pruebas s√≠ncronas primero
    test_node_adaptations_sync()

    print("\n" + "=" * 70)

    # Ejecutar pruebas de transformaci√≥n de lenguaje
    test_node_technical_language_transformation()

    print("\n" + "=" * 70)

    # Ejecutar pruebas as√≠ncronas
    asyncio.run(test_node_personality_adaptations())
