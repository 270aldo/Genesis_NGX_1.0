#!/usr/bin/env python3
"""
Script de prueba para STELLA PersonalityAdapter.
Siguiendo el patr√≥n est√°ndar de BLAZE, VOLT, CODE y NOVA.
"""

import asyncio
import sys
import os
import json
from pathlib import Path

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from core.personality.personality_adapter import PersonalityAdapter, PersonalityProfile
from core.logging_config import setup_logging


async def test_stella_personality_adapter():
    """
    Prueba STELLA PersonalityAdapter siguiendo el patr√≥n est√°ndar.
    """
    print("üìä STELLA PersonalityAdapter - Prueba Estandarizada")
    print("=" * 60)

    # Configurar logging
    setup_logging()

    try:
        # Crear instancia del PersonalityAdapter (patr√≥n est√°ndar)
        print("‚öôÔ∏è Inicializando PersonalityAdapter...")
        personality_adapter = PersonalityAdapter()
        print("‚úÖ PersonalityAdapter inicializado correctamente")

        # Respuesta base de STELLA (simulando an√°lisis de progreso)
        stella_progress_response = """
        ¬°Incre√≠bles noticias sobre tu progreso! He analizado tus datos y los resultados son 
        fant√°sticos. Durante las √∫ltimas 4 semanas, has mostrado una mejora consistente del 23% 
        en todas las m√©tricas clave que estamos monitoreando.
        
        Tu adherencia al programa ha sido ejemplar - 89% de cumplimiento con los objetivos 
        establecidos. Los datos muestran mejoras notables en: resistencia cardiovascular (+18%), 
        fuerza muscular (+15%), y calidad de sue√±o (+12%).
        
        ¬°Estoy tan emocionada de celebrar estos logros contigo! Estos n√∫meros no son solo 
        estad√≠sticas, representan tu dedicaci√≥n y compromiso. El pr√≥ximo hito est√° a solo 
        2 semanas de distancia y con este momentum, estoy segura de que lo alcanzar√°s.
        """

        print("\nüéØ Prueba 1: STELLA + PRIME (Analista Ejecutiva Celebratoria)")
        print("-" * 50)

        # Simular contexto de usuario PRIME (siguiendo patr√≥n est√°ndar)
        prime_context = {
            "user_query": "An√°lisis de performance y ROI de mi progreso en fitness ejecutivo",
            "user_profile": {
                "goals": [
                    "executive performance",
                    "productivity optimization",
                    "stress management",
                ],
                "occupation": "Senior Executive",
                "age": 45,
            },
            "program_type": "PRIME",
            "preferences": {
                "communication_style": "executive_celebration",
                "data_format": "strategic_insights",
            },
        }

        # Crear perfil de personalidad (patr√≥n est√°ndar)
        prime_profile = PersonalityProfile(
            program_type="PRIME",
            age=45,
            preferences=prime_context.get("preferences"),
            emotional_patterns={"motivation_level": 9, "achievement_focus": 10},
        )

        # Aplicar adaptaci√≥n (m√©todo est√°ndar)
        prime_adaptation = personality_adapter.adapt_response(
            agent_id="STELLA",
            original_message=stella_progress_response,
            user_profile=prime_profile,
            context=prime_context,
        )

        print("üîπ Respuesta Original STELLA:")
        print(stella_progress_response[:200] + "...")
        print("\nüîπ Respuesta Adaptada PRIME:")
        print(prime_adaptation["adapted_message"][:350] + "...")
        print(f"\nüìà Programa: {prime_adaptation.get('program_type', 'N/A')}")
        print(
            f"üìä Confianza: {prime_adaptation.get('adaptation_metrics', {}).get('confidence_score', 0):.2f}"
        )
        print(
            f"‚ö° Adaptaciones: {prime_adaptation.get('adaptation_metrics', {}).get('adaptations_applied', [])}"
        )

        print("\n" + "=" * 60)
        print("üå± Prueba 2: STELLA + LONGEVITY (Celebradora de Bienestar)")
        print("-" * 50)

        # Simular contexto de usuario LONGEVITY (siguiendo patr√≥n est√°ndar)
        longevity_context = {
            "user_query": "Celebrar mi progreso en el viaje de bienestar y salud integral",
            "user_profile": {
                "goals": ["healthy aging", "wellness journey", "life balance"],
                "lifestyle": "health_focused",
                "age": 58,
            },
            "program_type": "LONGEVITY",
            "preferences": {
                "communication_style": "nurturing_celebration",
                "data_format": "encouraging_insights",
            },
        }

        # Crear perfil de personalidad (patr√≥n est√°ndar)
        longevity_profile = PersonalityProfile(
            program_type="LONGEVITY",
            age=58,
            preferences=longevity_context.get("preferences"),
            emotional_patterns={"motivation_level": 8, "wellness_focus": 9},
        )

        # Aplicar adaptaci√≥n (m√©todo est√°ndar)
        longevity_adaptation = personality_adapter.adapt_response(
            agent_id="STELLA",
            original_message=stella_progress_response,
            user_profile=longevity_profile,
            context=longevity_context,
        )

        print("üîπ Respuesta Original STELLA:")
        print(stella_progress_response[:200] + "...")
        print("\nüîπ Respuesta Adaptada LONGEVITY:")
        print(longevity_adaptation["adapted_message"][:350] + "...")
        print(f"\nüåø Programa: {longevity_adaptation.get('program_type', 'N/A')}")
        print(
            f"üìä Confianza: {longevity_adaptation.get('adaptation_metrics', {}).get('confidence_score', 0):.2f}"
        )
        print(
            f"‚ö° Adaptaciones: {longevity_adaptation.get('adaptation_metrics', {}).get('adaptations_applied', [])}"
        )

        print("\n" + "=" * 60)
        print("üß™ Prueba 3: Validaci√≥n del Patr√≥n Est√°ndar STELLA")
        print("-" * 50)

        # Validar que sigue el mismo patr√≥n que BLAZE, VOLT, CODE, NOVA
        print("‚úÖ Validaciones del Patr√≥n Est√°ndar:")

        # 1. Verificar que tiene PersonalityAdapter
        has_personality_adapter = "adapted_message" in prime_adaptation
        print(
            f"  ‚Ä¢ PersonalityAdapter integrado: {'‚úÖ' if has_personality_adapter else '‚ùå'}"
        )

        # 2. Verificar m√©tricas de adaptaci√≥n
        has_metrics = "adaptation_metrics" in prime_adaptation
        print(f"  ‚Ä¢ M√©tricas de adaptaci√≥n: {'‚úÖ' if has_metrics else '‚ùå'}")

        # 3. Verificar diferenciaci√≥n PRIME vs LONGEVITY
        different_lengths = len(prime_adaptation["adapted_message"]) != len(
            longevity_adaptation["adapted_message"]
        )
        print(
            f"  ‚Ä¢ Diferenciaci√≥n PRIME/LONGEVITY: {'‚úÖ' if different_lengths else '‚ùå'}"
        )

        # 4. Verificar estructura de respuesta
        has_standard_fields = all(
            key in prime_adaptation
            for key in [
                "adapted_message",
                "original_message",
                "program_type",
                "agent_id",
            ]
        )
        print(
            f"  ‚Ä¢ Estructura est√°ndar de respuesta: {'‚úÖ' if has_standard_fields else '‚ùå'}"
        )

        # 5. Verificar agente_id
        correct_agent_id = prime_adaptation.get("agent_id") == "STELLA"
        print(f"  ‚Ä¢ Agent ID correcto (STELLA): {'‚úÖ' if correct_agent_id else '‚ùå'}")

        # An√°lisis comparativo con otros agentes
        print(f"\nüîç An√°lisis Comparativo:")
        print(
            f"  ‚Ä¢ PRIME - Longitud: {len(prime_adaptation['adapted_message'])} caracteres"
        )
        print(
            f"  ‚Ä¢ LONGEVITY - Longitud: {len(longevity_adaptation['adapted_message'])} caracteres"
        )
        print(
            f"  ‚Ä¢ Diferencia: {abs(len(prime_adaptation['adapted_message']) - len(longevity_adaptation['adapted_message']))} caracteres"
        )

        # Verificar palabras clave espec√≠ficas de STELLA (ESFJ - The Consul)
        print(f"\nüéä Palabras Clave STELLA (Celebradora/Analista):")
        prime_msg = prime_adaptation["adapted_message"].lower()
        longevity_msg = longevity_adaptation["adapted_message"].lower()

        celebration_keywords = ["celebr", "felicit", "logr", "√©xit", "reconoc"]
        analysis_keywords = ["an√°lisis", "datos", "m√©tricas", "trend", "progres"]
        executive_keywords = ["performance", "roi", "estrat√©gic", "kpi", "optimizaci√≥n"]
        wellness_keywords = [
            "bienestar",
            "crecimient",
            "viaje",
            "florecimient",
            "sembr",
        ]

        prime_celebration = [kw for kw in celebration_keywords if kw in prime_msg]
        longevity_celebration = [
            kw for kw in celebration_keywords if kw in longevity_msg
        ]
        prime_analysis = [kw for kw in analysis_keywords if kw in prime_msg]
        longevity_analysis = [kw for kw in analysis_keywords if kw in longevity_msg]
        prime_executive = [kw for kw in executive_keywords if kw in prime_msg]
        longevity_wellness = [kw for kw in wellness_keywords if kw in longevity_msg]

        print(f"  ‚Ä¢ PRIME - T√©rminos celebratorios: {prime_celebration}")
        print(f"  ‚Ä¢ LONGEVITY - T√©rminos celebratorios: {longevity_celebration}")
        print(f"  ‚Ä¢ PRIME - T√©rminos anal√≠ticos: {prime_analysis}")
        print(f"  ‚Ä¢ LONGEVITY - T√©rminos anal√≠ticos: {longevity_analysis}")
        print(f"  ‚Ä¢ PRIME - T√©rminos ejecutivos: {prime_executive}")
        print(f"  ‚Ä¢ LONGEVITY - T√©rminos de bienestar: {longevity_wellness}")

        print("\n" + "=" * 60)
        print("üéâ STELLA PersonalityAdapter - Prueba Estandarizada Completada")
        print("‚úÖ STELLA sigue el patr√≥n est√°ndar de PersonalityAdapter")
        print("‚úÖ Integraci√≥n consistente con BLAZE, VOLT, CODE, NOVA y otros agentes")
        print("‚úÖ Personalidad ESFJ (The Consul) preservada correctamente")
        print("‚úÖ Adaptaciones diferenciadas por programa (PRIME/LONGEVITY)")
        print("‚úÖ Vocabulario celebratorio y anal√≠tico mantenido apropiadamente")
        print("‚úÖ STELLA como Celebradora Ejecutiva vs Celebradora de Bienestar")
        print("\nüìù STELLA est√° ESTANDARIZADA para FASE 9.1 ‚ú®")

        return True

    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    asyncio.run(test_stella_personality_adapter())
