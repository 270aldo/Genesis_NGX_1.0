#!/usr/bin/env python3
"""
Script de prueba simplificado para CODE PersonalityAdapter.
Enfoque solo en el PersonalityAdapter sin las skills complejas.
"""

import asyncio
import sys
import os
import json
from pathlib import Path

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from core.personality.personality_adapter import PersonalityAdapter, PersonalityProfile
from core.logging_config import setup_logging


async def test_code_personality_direct():
    """
    Prueba directa del PersonalityAdapter para CODE sin instanciar el agente completo.
    """
    print("üß¨ CODE PersonalityAdapter - Prueba Directa")
    print("=" * 60)

    # Configurar logging
    setup_logging()

    try:
        # Crear instancia directa del PersonalityAdapter
        print("‚öôÔ∏è Inicializando PersonalityAdapter...")
        personality_adapter = PersonalityAdapter()
        print("‚úÖ PersonalityAdapter inicializado correctamente")

        # Respuesta de ejemplo de CODE
        sample_genetic_response = """
        Tu perfil gen√©tico revela hallazgos fascinantes sobre tu potencial √∫nico. 
        He identificado que posees la variante ACTN3 R577R, conocida como el "gen de la velocidad", 
        que te confiere ventajas significativas en actividades de potencia y fuerza explosiva. 
        
        Adem√°s, tu genotipo APOE E3/E3 indica un riesgo cardiovascular est√°ndar con excelente 
        capacidad de respuesta a intervenciones diet√©ticas. Los marcadores de CYP1A2 sugieren 
        que metabolizas la cafe√≠na de manera eficiente, lo que optimiza su uso como ayuda ergog√©nica.
        
        Recomiendo protocolos de entrenamiento que aprovechen tu potencial gen√©tico de potencia, 
        combinados con estrategias nutricionales personalizadas basadas en tu perfil APOE.
        """

        print("\nüéØ Prueba 1: CODE + PRIME (Ejecutivo)")
        print("-" * 40)

        # Crear perfil PRIME
        prime_profile = PersonalityProfile(
            program_type="PRIME",
            age=42,
            preferences={
                "communication_style": "executive",
                "data_format": "high_level_insights",
            },
            emotional_patterns={"motivation_level": 9, "stress_level": 6},
        )

        # Adaptar para PRIME
        prime_adaptation = personality_adapter.adapt_response(
            agent_id="CODE",
            original_message=sample_genetic_response,
            user_profile=prime_profile,
            context={
                "domain": "genetic_analysis",
                "session_type": "executive_briefing",
            },
        )

        print("üîπ Respuesta Original:")
        print(sample_genetic_response[:200] + "...")
        print("\nüîπ Respuesta Adaptada PRIME:")
        print(prime_adaptation["adapted_message"][:300] + "...")
        print(f"\nüìà Programa: {prime_adaptation.get('program_type', 'N/A')}")
        print(
            f"üìä Confianza: {prime_adaptation.get('adaptation_metrics', {}).get('confidence_score', 0):.2f}"
        )

        print("\n" + "=" * 60)
        print("üå± Prueba 2: CODE + LONGEVITY (Bienestar)")
        print("-" * 40)

        # Crear perfil LONGEVITY
        longevity_profile = PersonalityProfile(
            program_type="LONGEVITY",
            age=55,
            preferences={
                "communication_style": "educational",
                "data_format": "detailed_explanations",
            },
            emotional_patterns={"motivation_level": 7, "stress_level": 3},
        )

        # Adaptar para LONGEVITY
        longevity_adaptation = personality_adapter.adapt_response(
            agent_id="CODE",
            original_message=sample_genetic_response,
            user_profile=longevity_profile,
            context={
                "domain": "genetic_analysis",
                "session_type": "wellness_consultation",
            },
        )

        print("üîπ Respuesta Original:")
        print(sample_genetic_response[:200] + "...")
        print("\nüîπ Respuesta Adaptada LONGEVITY:")
        print(longevity_adaptation["adapted_message"][:300] + "...")
        print(f"\nüåø Programa: {longevity_adaptation.get('program_type', 'N/A')}")
        print(
            f"üìä Confianza: {longevity_adaptation.get('adaptation_metrics', {}).get('confidence_score', 0):.2f}"
        )

        print("\n" + "=" * 60)
        print("üß™ Prueba 3: An√°lisis de Diferencias")
        print("-" * 40)

        # An√°lisis de m√©tricas
        print("üìä M√©tricas de Adaptaci√≥n:")
        prime_metrics = prime_adaptation.get("adaptation_metrics", {})
        longevity_metrics = longevity_adaptation.get("adaptation_metrics", {})

        print(
            f"  ‚Ä¢ PRIME - Adaptaciones: {prime_metrics.get('adaptations_applied', [])}"
        )
        print(f"  ‚Ä¢ PRIME - Tiempo: {prime_metrics.get('processing_time_ms', 0):.2f}ms")
        print(
            f"  ‚Ä¢ LONGEVITY - Adaptaciones: {longevity_metrics.get('adaptations_applied', [])}"
        )
        print(
            f"  ‚Ä¢ LONGEVITY - Tiempo: {longevity_metrics.get('processing_time_ms', 0):.2f}ms"
        )

        # An√°lisis de diferencias de contenido
        prime_length = len(prime_adaptation["adapted_message"])
        longevity_length = len(longevity_adaptation["adapted_message"])

        print(f"\nüîç An√°lisis de Contenido:")
        print(f"  ‚Ä¢ Longitud PRIME: {prime_length} caracteres")
        print(f"  ‚Ä¢ Longitud LONGEVITY: {longevity_length} caracteres")
        print(f"  ‚Ä¢ Diferencia: {abs(prime_length - longevity_length)} caracteres")

        # Verificar palabras clave espec√≠ficas
        print("\nüéØ Palabras Clave Detectadas:")
        prime_msg = prime_adaptation["adapted_message"].lower()
        longevity_msg = longevity_adaptation["adapted_message"].lower()

        # Palabras clave esperadas
        executive_keywords = ["protocolo", "estrat√©gico", "optimizaci√≥n", "kpi", "roi"]
        wellness_keywords = [
            "bienestar",
            "salud",
            "cuidado",
            "prevenci√≥n",
            "sostenible",
        ]
        genetic_keywords = ["gen", "gen√©tico", "adn", "cromosoma", "herencia"]

        prime_exec_found = [kw for kw in executive_keywords if kw in prime_msg]
        longevity_wellness_found = [
            kw for kw in wellness_keywords if kw in longevity_msg
        ]
        genetic_terms_prime = [kw for kw in genetic_keywords if kw in prime_msg]
        genetic_terms_longevity = [kw for kw in genetic_keywords if kw in longevity_msg]

        print(f"  ‚Ä¢ PRIME (ejecutivo): {prime_exec_found}")
        print(f"  ‚Ä¢ LONGEVITY (bienestar): {longevity_wellness_found}")
        print(f"  ‚Ä¢ Gen√©ticos PRIME: {genetic_terms_prime}")
        print(f"  ‚Ä¢ Gen√©ticos LONGEVITY: {genetic_terms_longevity}")

        print("\n" + "=" * 60)
        print("üéâ CODE PersonalityAdapter - Pruebas Completadas")
        print("‚úÖ PersonalityAdapter funcionando correctamente")
        print("‚úÖ Adaptaciones diferenciadas entre PRIME y LONGEVITY")
        print("‚úÖ Vocabulario cient√≠fico gen√©tico preservado")
        print("‚úÖ M√©tricas de adaptaci√≥n generadas correctamente")
        print("\nüìù CODE PersonalityAdapter est√° OPERATIVO ‚ú®")

        return True

    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback

        traceback.print_exc()
        return False


async def test_code_style_preview():
    """
    Prueba la vista previa de estilos para CODE.
    """
    print("\nüé® CODE - Vista Previa de Estilos PersonalityAdapter")
    print("-" * 60)

    try:
        personality_adapter = PersonalityAdapter()

        # Obtener vista previa para PRIME
        prime_preview = personality_adapter.get_personality_preview(
            agent_id="CODE",
            program_type="PRIME",
            sample_message="Tu an√°lisis gen√©tico revela potencial excepcional para rendimiento atl√©tico.",
        )

        print("üîπ Vista Previa PRIME:")
        print(f"  ‚Ä¢ Tono: {prime_preview.get('style_details', {}).get('tone', 'N/A')}")
        print(
            f"  ‚Ä¢ Enfoque: {prime_preview.get('style_details', {}).get('focus_area', 'N/A')}"
        )
        print(
            f"  ‚Ä¢ Longitud: {prime_preview.get('style_details', {}).get('response_length', 'N/A')}"
        )
        print(
            f"  ‚Ä¢ Muestra adaptada: {prime_preview.get('adapted_sample', 'N/A')[:100]}..."
        )

        # Obtener vista previa para LONGEVITY
        longevity_preview = personality_adapter.get_personality_preview(
            agent_id="CODE",
            program_type="LONGEVITY",
            sample_message="Tu an√°lisis gen√©tico revela potencial excepcional para rendimiento atl√©tico.",
        )

        print("\nüîπ Vista Previa LONGEVITY:")
        print(
            f"  ‚Ä¢ Tono: {longevity_preview.get('style_details', {}).get('tone', 'N/A')}"
        )
        print(
            f"  ‚Ä¢ Enfoque: {longevity_preview.get('style_details', {}).get('focus_area', 'N/A')}"
        )
        print(
            f"  ‚Ä¢ Longitud: {longevity_preview.get('style_details', {}).get('response_length', 'N/A')}"
        )
        print(
            f"  ‚Ä¢ Muestra adaptada: {longevity_preview.get('adapted_sample', 'N/A')[:100]}..."
        )

        print("\n‚úÖ Vista previa de estilos funcionando correctamente")

    except Exception as e:
        print(f"‚ùå Error en vista previa: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":

    async def main():
        success = await test_code_personality_direct()
        if success:
            await test_code_style_preview()

    asyncio.run(main())
