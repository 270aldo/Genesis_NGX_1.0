#!/usr/bin/env python3
"""
Script de prueba para CODE PersonalityAdapter.

Prueba las adaptaciones de personalidad espec√≠ficas de CODE para
diferentes tipos de programa (PRIME vs LONGEVITY).
"""

import asyncio
import sys
import os
import json
from pathlib import Path

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from agents.code_genetic_specialist.agent import CodeGeneticSpecialist
from core.logging_config import setup_logging


async def test_code_personality_adapter():
    """
    Prueba las adaptaciones de personalidad de CODE para diferentes programas.
    """
    print("üß¨ CODE PersonalityAdapter - Sistema de Pruebas")
    print("=" * 60)

    # Configurar logging
    setup_logging()

    try:
        # Crear instancia del agente CODE
        print("üî¨ Inicializando CODE Genetic Specialist...")
        code_agent = CodeGeneticSpecialist()
        print("‚úÖ CODE inicializado correctamente")

        # Respuesta de ejemplo de CODE
        sample_genetic_response = {
            "response": """
            Tu perfil gen√©tico revela hallazgos fascinantes sobre tu potencial √∫nico. 
            He identificado que posees la variante ACTN3 R577R, conocida como el "gen de la velocidad", 
            que te confiere ventajas significativas en actividades de potencia y fuerza explosiva. 
            
            Adem√°s, tu genotipo APOE E3/E3 indica un riesgo cardiovascular est√°ndar con excelente 
            capacidad de respuesta a intervenciones diet√©ticas. Los marcadores de CYP1A2 sugieren 
            que metabolizas la cafe√≠na de manera eficiente, lo que optimiza su uso como ayuda ergog√©nica.
            
            Recomiendo protocolos de entrenamiento que aprovechen tu potencial gen√©tico de potencia, 
            combinados con estrategias nutricionales personalizadas basadas en tu perfil APOE.
            """,
            "confidence": 0.92,
            "data": {
                "genetic_markers": ["ACTN3", "APOE", "CYP1A2"],
                "strengths": ["power_performance", "caffeine_metabolism"],
                "considerations": ["cardiovascular_optimization"],
            },
        }

        print("\nüéØ Prueba 1: CODE + PRIME (Ejecutivo)")
        print("-" * 40)

        # Adaptar para PRIME
        prime_adapted = await code_agent._adapt_response_to_audience(
            response=sample_genetic_response.copy(),
            program_type="PRIME",
            user_id="executive_user_001",
        )

        print("üîπ Respuesta Original:")
        print(sample_genetic_response["response"][:200] + "...")
        print("\nüîπ Respuesta Adaptada PRIME:")
        print(prime_adapted["response"][:300] + "...")
        print(f"\nüìà Tono: {prime_adapted.get('tone', 'N/A')}")
        print(f"üéØ √ânfasis: {prime_adapted.get('emphasis', 'N/A')}")
        print(
            f"üó£Ô∏è Estilo: {prime_adapted.get('communication_style', {}).get('language', 'N/A')}"
        )

        print("\n" + "=" * 60)
        print("üå± Prueba 2: CODE + LONGEVITY (Bienestar)")
        print("-" * 40)

        # Adaptar para LONGEVITY
        longevity_adapted = await code_agent._adapt_response_to_audience(
            response=sample_genetic_response.copy(),
            program_type="LONGEVITY",
            user_id="wellness_user_001",
        )

        print("üîπ Respuesta Original:")
        print(sample_genetic_response["response"][:200] + "...")
        print("\nüîπ Respuesta Adaptada LONGEVITY:")
        print(longevity_adapted["response"][:300] + "...")
        print(f"\nüåø Tono: {longevity_adapted.get('tone', 'N/A')}")
        print(f"üéØ √ânfasis: {longevity_adapted.get('emphasis', 'N/A')}")
        print(
            f"üó£Ô∏è Estilo: {longevity_adapted.get('communication_style', {}).get('language', 'N/A')}"
        )

        print("\n" + "=" * 60)
        print("üß™ Prueba 3: An√°lisis de M√©tricas de Adaptaci√≥n")
        print("-" * 40)

        # Comparar m√©tricas
        if "adaptation_metrics" in prime_adapted:
            print("üìä M√©tricas PRIME:")
            prime_metrics = prime_adapted["adaptation_metrics"]
            print(
                f"  ‚Ä¢ Adaptaciones aplicadas: {prime_metrics.get('adaptations_applied', [])}"
            )
            print(f"  ‚Ä¢ Confianza: {prime_metrics.get('confidence_score', 0):.2f}")
            print(
                f"  ‚Ä¢ Tiempo de procesamiento: {prime_metrics.get('processing_time_ms', 0):.2f}ms"
            )

        if "adaptation_metrics" in longevity_adapted:
            print("\nüìä M√©tricas LONGEVITY:")
            longevity_metrics = longevity_adapted["adaptation_metrics"]
            print(
                f"  ‚Ä¢ Adaptaciones aplicadas: {longevity_metrics.get('adaptations_applied', [])}"
            )
            print(f"  ‚Ä¢ Confianza: {longevity_metrics.get('confidence_score', 0):.2f}")
            print(
                f"  ‚Ä¢ Tiempo de procesamiento: {longevity_metrics.get('processing_time_ms', 0):.2f}ms"
            )

        # An√°lisis de diferencias comunicacionales
        print("\nüîç An√°lisis de Diferencias Comunicacionales:")
        prime_length = len(prime_adapted["response"])
        longevity_length = len(longevity_adapted["response"])

        print(f"  ‚Ä¢ Longitud PRIME: {prime_length} caracteres")
        print(f"  ‚Ä¢ Longitud LONGEVITY: {longevity_length} caracteres")
        print(f"  ‚Ä¢ Diferencia: {abs(prime_length - longevity_length)} caracteres")

        # Verificar palabras clave espec√≠ficas de CODE
        print("\nüß¨ Palabras Clave Gen√©ticas Detectadas:")
        prime_msg = prime_adapted["response"].lower()
        longevity_msg = longevity_adapted["response"].lower()

        executive_keywords = [
            "estrat√©gico",
            "ventaja",
            "competitiva",
            "optimizaci√≥n",
            "rendimiento",
        ]
        wellness_keywords = [
            "bienestar",
            "salud",
            "preventiva",
            "personalizada",
            "cuidar",
        ]
        genetic_keywords = ["gen", "adn", "gen√©tico", "cromosoma", "alelo"]

        prime_exec_found = [kw for kw in executive_keywords if kw in prime_msg]
        longevity_wellness_found = [
            kw for kw in wellness_keywords if kw in longevity_msg
        ]
        genetic_terms_prime = [kw for kw in genetic_keywords if kw in prime_msg]
        genetic_terms_longevity = [kw for kw in genetic_keywords if kw in longevity_msg]

        print(f"  ‚Ä¢ PRIME (ejecutivo): {prime_exec_found}")
        print(f"  ‚Ä¢ LONGEVITY (bienestar): {longevity_wellness_found}")
        print(f"  ‚Ä¢ T√©rminos gen√©ticos PRIME: {genetic_terms_prime}")
        print(f"  ‚Ä¢ T√©rminos gen√©ticos LONGEVITY: {genetic_terms_longevity}")

        print("\n" + "=" * 60)
        print("üéâ CODE PersonalityAdapter - Pruebas Completadas")
        print("‚úÖ Integraci√≥n PersonalityAdapter verificada exitosamente")
        print("‚úÖ Adaptaciones PRIME y LONGEVITY funcionando correctamente")
        print("‚úÖ Personalidad INTJ (The Architect) preservada en ambos casos")
        print("‚úÖ Vocabulario cient√≠fico gen√©tico mantenido apropiadamente")
        print("\nüìù CODE est√° listo para FASE 9.1 - PersonalityAdapter ‚ú®")

        return True

    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback

        traceback.print_exc()
        return False


async def test_code_genetic_skills_with_personality():
    """
    Prueba skills gen√©ticas espec√≠ficas con adaptaciones de personalidad.
    """
    print("\nüß¨ Prueba de Skills Gen√©ticas con PersonalityAdapter")
    print("-" * 60)

    try:
        code_agent = CodeGeneticSpecialist()

        # Simulaci√≥n de an√°lisis de riesgo gen√©tico
        genetic_risk_analysis = {
            "response": """
            El an√°lisis de tu perfil gen√©tico identifica factores importantes para tu salud cardiovascular. 
            Tu variante APOE E4/E3 requiere atenci√≥n espec√≠fica en la prevenci√≥n de enfermedades card√≠acas 
            mediante estrategias nutricionales dirigidas y monitoreo proactivo de biomarcadores lip√≠dicos.
            """,
            "data": {
                "risk_factors": ["cardiovascular", "lipid_metabolism"],
                "protective_factors": ["response_to_exercise", "omega3_efficiency"],
            },
        }

        print("üîπ An√°lisis de Riesgo Base:")
        print(genetic_risk_analysis["response"][:150] + "...")

        # Adaptar para contexto ejecutivo (PRIME)
        prime_risk_adapted = await code_agent._adapt_response_to_audience(
            response=genetic_risk_analysis.copy(),
            program_type="PRIME",
            user_id="executive_genetic_001",
        )

        print("\nüîπ An√°lisis de Riesgo Adaptado PRIME:")
        print(prime_risk_adapted["response"][:200] + "...")

        # Adaptar para contexto de bienestar (LONGEVITY)
        longevity_risk_adapted = await code_agent._adapt_response_to_audience(
            response=genetic_risk_analysis.copy(),
            program_type="LONGEVITY",
            user_id="wellness_genetic_001",
        )

        print("\nüîπ An√°lisis de Riesgo Adaptado LONGEVITY:")
        print(longevity_risk_adapted["response"][:200] + "...")

        print("\n‚úÖ Skills gen√©ticas con PersonalityAdapter funcionando correctamente")

    except Exception as e:
        print(f"‚ùå Error en prueba de skills gen√©ticas: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":

    async def main():
        await test_code_personality_adapter()
        await test_code_genetic_skills_with_personality()

    asyncio.run(main())
