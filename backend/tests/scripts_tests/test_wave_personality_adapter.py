#!/usr/bin/env python3
"""
Script de prueba para WAVE PersonalityAdapter.
Siguiendo el patr√≥n est√°ndar de BLAZE, VOLT, CODE, NOVA y STELLA.
"""

import asyncio
import sys
import os
import json
from pathlib import Path

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from core.personality.personality_adapter import PersonalityAdapter, PersonalityProfile
from core.logging_config import setup_logging


async def test_wave_personality_adapter():
    """
    Prueba WAVE PersonalityAdapter siguiendo el patr√≥n est√°ndar.
    """
    print("üåä WAVE PersonalityAdapter - Prueba Estandarizada")
    print("=" * 60)

    # Configurar logging
    setup_logging()

    try:
        # Crear instancia del PersonalityAdapter (patr√≥n est√°ndar)
        print("‚öôÔ∏è Inicializando PersonalityAdapter...")
        personality_adapter = PersonalityAdapter()
        print("‚úÖ PersonalityAdapter inicializado correctamente")

        # Respuesta base de WAVE (simulando protocolo de recuperaci√≥n)
        wave_recovery_response = """
        Bas√°ndome en tu consulta sobre recuperaci√≥n, he dise√±ado un protocolo integral que 
        equilibra la ciencia moderna con la sabidur√≠a ancestral de sanaci√≥n. Tu cuerpo necesita 
        tanto reposo activo como t√©cnicas espec√≠ficas de movilidad para optimizar la recuperaci√≥n.
        
        El protocolo incluye: t√©cnicas de respiraci√≥n profunda para activar el sistema nervioso 
        parasimp√°tico, movimientos suaves de movilidad articular, hidroterapia con contraste 
        de temperaturas, y meditaci√≥n guiada para la recuperaci√≥n mental. Cada elemento est√° 
        dise√±ado para promover la sanaci√≥n natural y prevenir futuras lesiones.
        
        Recuerda que la recuperaci√≥n es un proceso hol√≠stico que involucra cuerpo, mente y 
        esp√≠ritu. Escucha a tu cuerpo y ajusta la intensidad seg√∫n tus sensaciones.
        """

        print("\nüéØ Prueba 1: WAVE + PRIME (Especialista en Recovery Ejecutivo)")
        print("-" * 50)

        # Simular contexto de usuario PRIME (siguiendo patr√≥n est√°ndar)
        prime_context = {
            "user_query": "Protocolo de recuperaci√≥n r√°pida para mantener mi rendimiento ejecutivo",
            "user_profile": {
                "goals": [
                    "performance recovery",
                    "injury prevention",
                    "executive wellness",
                ],
                "occupation": "C-Suite Executive",
                "age": 48,
            },
            "program_type": "PRIME",
            "preferences": {
                "communication_style": "technical_efficient",
                "data_format": "recovery_metrics",
            },
        }

        # Crear perfil de personalidad (patr√≥n est√°ndar)
        prime_profile = PersonalityProfile(
            program_type="PRIME",
            age=48,
            preferences=prime_context.get("preferences"),
            emotional_patterns={"stress_level": 7, "recovery_focus": 9},
        )

        # Aplicar adaptaci√≥n (m√©todo est√°ndar)
        prime_adaptation = personality_adapter.adapt_response(
            agent_id="WAVE",
            original_message=wave_recovery_response,
            user_profile=prime_profile,
            context=prime_context,
        )

        print("üîπ Respuesta Original WAVE:")
        print(wave_recovery_response[:200] + "...")
        print("\nüîπ Respuesta Adaptada PRIME:")
        print(prime_adaptation["adapted_message"][:350] + "...")
        print(f"\nüìà Programa: {prime_adaptation.get('program_type', 'N/A')}")
        print(
            f"üìä Confianza: {prime_adaptation.get('adaptation_metrics', {}).get('confidence_score', 0):.2f}"
        )
        print(
            f"‚ö° Adaptaciones: {prime_adaptation.get('adaptation_metrics', {}).get('adaptations_applied', [])}"
        )

        print("\n" + "=" * 60)
        print("üå± Prueba 2: WAVE + LONGEVITY (Sanador Hol√≠stico Sabio)")
        print("-" * 50)

        # Simular contexto de usuario LONGEVITY (siguiendo patr√≥n est√°ndar)
        longevity_context = {
            "user_query": "Pr√°cticas de sanaci√≥n natural para mi bienestar y recuperaci√≥n integral",
            "user_profile": {
                "goals": ["holistic healing", "natural recovery", "pain-free living"],
                "lifestyle": "wellness_oriented",
                "age": 62,
            },
            "program_type": "LONGEVITY",
            "preferences": {
                "communication_style": "holistic_gentle",
                "data_format": "healing_wisdom",
            },
        }

        # Crear perfil de personalidad (patr√≥n est√°ndar)
        longevity_profile = PersonalityProfile(
            program_type="LONGEVITY",
            age=62,
            preferences=longevity_context.get("preferences"),
            emotional_patterns={"stress_level": 4, "healing_focus": 10},
        )

        # Aplicar adaptaci√≥n (m√©todo est√°ndar)
        longevity_adaptation = personality_adapter.adapt_response(
            agent_id="WAVE",
            original_message=wave_recovery_response,
            user_profile=longevity_profile,
            context=longevity_context,
        )

        print("üîπ Respuesta Original WAVE:")
        print(wave_recovery_response[:200] + "...")
        print("\nüîπ Respuesta Adaptada LONGEVITY:")
        print(longevity_adaptation["adapted_message"][:350] + "...")
        print(f"\nüåø Programa: {longevity_adaptation.get('program_type', 'N/A')}")
        print(
            f"üìä Confianza: {longevity_adaptation.get('adaptation_metrics', {}).get('confidence_score', 0):.2f}"
        )
        print(
            f"‚ö° Adaptaciones: {longevity_adaptation.get('adaptation_metrics', {}).get('adaptations_applied', [])}"
        )

        print("\n" + "=" * 60)
        print("üß™ Prueba 3: Validaci√≥n del Patr√≥n Est√°ndar WAVE")
        print("-" * 50)

        # Validar que sigue el mismo patr√≥n que otros agentes
        print("‚úÖ Validaciones del Patr√≥n Est√°ndar:")

        # 1. Verificar que tiene PersonalityAdapter
        has_personality_adapter = "adapted_message" in prime_adaptation
        print(
            f"  ‚Ä¢ PersonalityAdapter integrado: {'‚úÖ' if has_personality_adapter else '‚ùå'}"
        )

        # 2. Verificar m√©tricas de adaptaci√≥n
        has_metrics = "adaptation_metrics" in prime_adaptation
        print(f"  ‚Ä¢ M√©tricas de adaptaci√≥n: {'‚úÖ' if has_metrics else '‚ùå'}")

        # 3. Verificar diferenciaci√≥n PRIME vs LONGEVITY
        different_lengths = len(prime_adaptation["adapted_message"]) != len(
            longevity_adaptation["adapted_message"]
        )
        print(
            f"  ‚Ä¢ Diferenciaci√≥n PRIME/LONGEVITY: {'‚úÖ' if different_lengths else '‚ùå'}"
        )

        # 4. Verificar estructura de respuesta
        has_standard_fields = all(
            key in prime_adaptation
            for key in [
                "adapted_message",
                "original_message",
                "program_type",
                "agent_id",
            ]
        )
        print(
            f"  ‚Ä¢ Estructura est√°ndar de respuesta: {'‚úÖ' if has_standard_fields else '‚ùå'}"
        )

        # 5. Verificar agente_id
        correct_agent_id = prime_adaptation.get("agent_id") == "WAVE"
        print(f"  ‚Ä¢ Agent ID correcto (WAVE): {'‚úÖ' if correct_agent_id else '‚ùå'}")

        # An√°lisis comparativo con otros agentes
        print(f"\nüîç An√°lisis Comparativo:")
        print(
            f"  ‚Ä¢ PRIME - Longitud: {len(prime_adaptation['adapted_message'])} caracteres"
        )
        print(
            f"  ‚Ä¢ LONGEVITY - Longitud: {len(longevity_adaptation['adapted_message'])} caracteres"
        )
        print(
            f"  ‚Ä¢ Diferencia: {abs(len(prime_adaptation['adapted_message']) - len(longevity_adaptation['adapted_message']))} caracteres"
        )

        # Verificar palabras clave espec√≠ficas de WAVE (ISFP - The Adventurer)
        print(f"\nüïäÔ∏è Palabras Clave WAVE (Sanador Sabio/Hol√≠stico):")
        prime_msg = prime_adaptation["adapted_message"].lower()
        longevity_msg = longevity_adaptation["adapted_message"].lower()

        recovery_keywords = ["recuper", "sana", "preven", "dolor", "equilibr"]
        holistic_keywords = ["hol√≠stic", "integral", "natural", "cuerpo", "mente"]
        executive_keywords = [
            "protocolo",
            "optimiza",
            "rendimiento",
            "roi",
            "estrat√©gic",
        ]
        wellness_keywords = [
            "bienestar",
            "armon√≠a",
            "sabidur√≠a",
            "mindful",
            "compasi√≥n",
        ]

        prime_recovery = [kw for kw in recovery_keywords if kw in prime_msg]
        longevity_recovery = [kw for kw in recovery_keywords if kw in longevity_msg]
        prime_executive = [kw for kw in executive_keywords if kw in prime_msg]
        longevity_wellness = [kw for kw in wellness_keywords if kw in longevity_msg]

        print(f"  ‚Ä¢ PRIME - T√©rminos de recuperaci√≥n: {prime_recovery}")
        print(f"  ‚Ä¢ LONGEVITY - T√©rminos de recuperaci√≥n: {longevity_recovery}")
        print(f"  ‚Ä¢ PRIME - T√©rminos ejecutivos: {prime_executive}")
        print(f"  ‚Ä¢ LONGEVITY - T√©rminos de bienestar: {longevity_wellness}")

        print("\n" + "=" * 60)
        print("üéâ WAVE PersonalityAdapter - Prueba Estandarizada Completada")
        print("‚úÖ WAVE sigue el patr√≥n est√°ndar de PersonalityAdapter")
        print(
            "‚úÖ Integraci√≥n consistente con BLAZE, VOLT, CODE, NOVA, STELLA y otros agentes"
        )
        print("‚úÖ Personalidad ISFP (The Adventurer) preservada correctamente")
        print("‚úÖ Adaptaciones diferenciadas por programa (PRIME/LONGEVITY)")
        print("‚úÖ Vocabulario de recuperaci√≥n y sanaci√≥n mantenido apropiadamente")
        print("‚úÖ WAVE como Recovery Ejecutivo vs Sanador Hol√≠stico")
        print("\nüìù WAVE est√° ESTANDARIZADO para FASE 9.1 ‚ú®")

        return True

    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    asyncio.run(test_wave_personality_adapter())
