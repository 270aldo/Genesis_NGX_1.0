#!/usr/bin/env python3
"""
Script de prueba estandarizado para VOLT PersonalityAdapter.
Siguiendo el mismo patr√≥n que BLAZE y otros agentes.
"""

import asyncio
import sys
import os
import json
from pathlib import Path

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from core.personality.personality_adapter import PersonalityAdapter, PersonalityProfile
from core.logging_config import setup_logging


async def test_volt_personality_standardized():
    """
    Prueba VOLT PersonalityAdapter siguiendo el patr√≥n est√°ndar de BLAZE.
    """
    print("üî¨ VOLT PersonalityAdapter - Prueba Estandarizada")
    print("=" * 60)

    # Configurar logging
    setup_logging()

    try:
        # Crear instancia del PersonalityAdapter (patr√≥n est√°ndar)
        print("‚öôÔ∏è Inicializando PersonalityAdapter...")
        personality_adapter = PersonalityAdapter()
        print("‚úÖ PersonalityAdapter inicializado correctamente")

        # Respuesta base de VOLT (simulando an√°lisis biom√©trico)
        volt_analysis_response = """
        Bas√°ndome en el an√°lisis de tus datos biom√©tricos, he identificado varios patrones fascinantes. 
        Tu variabilidad card√≠aca muestra una tendencia ascendente, lo que indica una mejora en la 
        capacidad adaptativa de tu sistema nervioso aut√≥nomo. Los datos de sue√±o revelan una 
        optimizaci√≥n en la eficiencia, con incrementos notables en la fase de sue√±o profundo.
        
        Las fluctuaciones de glucosa muestran mayor estabilidad, sugiriendo una adaptaci√≥n metab√≥lica 
        positiva. La correlaci√≥n entre estos biomarcadores indica que tu protocolo actual est√° 
        generando resultados coherentes y sostenibles. Recomiendo continuar con las intervenciones 
        actuales y considerar ajustes espec√≠ficos en la ventana de alimentaci√≥n.
        """

        print("\nüéØ Prueba 1: VOLT + PRIME (M√©todo Est√°ndar)")
        print("-" * 50)

        # Simular contexto de usuario PRIME (siguiendo patr√≥n BLAZE)
        prime_context = {
            "user_query": "Optimizar mi rendimiento ejecutivo mediante an√°lisis biom√©trico",
            "user_profile": {
                "goals": ["performance optimization", "executive wellness"],
                "occupation": "CEO",
                "age": 42,
            },
            "program_type": "PRIME",
            "preferences": {
                "communication_style": "executive",
                "data_format": "strategic_insights",
            },
        }

        # Crear perfil de personalidad (patr√≥n est√°ndar)
        prime_profile = PersonalityProfile(
            program_type="PRIME",
            age=42,
            preferences=prime_context.get("preferences"),
            emotional_patterns={"motivation_level": 9, "stress_level": 6},
        )

        # Aplicar adaptaci√≥n (m√©todo est√°ndar)
        prime_adaptation = personality_adapter.adapt_response(
            agent_id="VOLT",
            original_message=volt_analysis_response,
            user_profile=prime_profile,
            context=prime_context,
        )

        print("üîπ Respuesta Original VOLT:")
        print(volt_analysis_response[:200] + "...")
        print("\nüîπ Respuesta Adaptada PRIME:")
        print(prime_adaptation["adapted_message"][:350] + "...")
        print(f"\nüìà Programa: {prime_adaptation.get('program_type', 'N/A')}")
        print(
            f"üìä Confianza: {prime_adaptation.get('adaptation_metrics', {}).get('confidence_score', 0):.2f}"
        )
        print(
            f"‚ö° Adaptaciones: {prime_adaptation.get('adaptation_metrics', {}).get('adaptations_applied', [])}"
        )

        print("\n" + "=" * 60)
        print("üå± Prueba 2: VOLT + LONGEVITY (M√©todo Est√°ndar)")
        print("-" * 50)

        # Simular contexto de usuario LONGEVITY (siguiendo patr√≥n BLAZE)
        longevity_context = {
            "user_query": "Entender mis datos de salud para mejorar mi bienestar a largo plazo",
            "user_profile": {
                "goals": ["longevity", "preventive health", "wellness optimization"],
                "lifestyle": "health_focused",
                "age": 55,
            },
            "program_type": "LONGEVITY",
            "preferences": {
                "communication_style": "educational",
                "data_format": "detailed_explanations",
            },
        }

        # Crear perfil de personalidad (patr√≥n est√°ndar)
        longevity_profile = PersonalityProfile(
            program_type="LONGEVITY",
            age=55,
            preferences=longevity_context.get("preferences"),
            emotional_patterns={"motivation_level": 7, "stress_level": 3},
        )

        # Aplicar adaptaci√≥n (m√©todo est√°ndar)
        longevity_adaptation = personality_adapter.adapt_response(
            agent_id="VOLT",
            original_message=volt_analysis_response,
            user_profile=longevity_profile,
            context=longevity_context,
        )

        print("üîπ Respuesta Original VOLT:")
        print(volt_analysis_response[:200] + "...")
        print("\nüîπ Respuesta Adaptada LONGEVITY:")
        print(longevity_adaptation["adapted_message"][:350] + "...")
        print(f"\nüåø Programa: {longevity_adaptation.get('program_type', 'N/A')}")
        print(
            f"üìä Confianza: {longevity_adaptation.get('adaptation_metrics', {}).get('confidence_score', 0):.2f}"
        )
        print(
            f"‚ö° Adaptaciones: {longevity_adaptation.get('adaptation_metrics', {}).get('adaptations_applied', [])}"
        )

        print("\n" + "=" * 60)
        print("üß™ Prueba 3: Validaci√≥n del Patr√≥n Est√°ndar")
        print("-" * 50)

        # Validar que sigue el mismo patr√≥n que BLAZE
        print("‚úÖ Validaciones del Patr√≥n Est√°ndar:")

        # 1. Verificar que tiene PersonalityAdapter
        has_personality_adapter = "adapted_message" in prime_adaptation
        print(
            f"  ‚Ä¢ PersonalityAdapter integrado: {'‚úÖ' if has_personality_adapter else '‚ùå'}"
        )

        # 2. Verificar m√©tricas de adaptaci√≥n
        has_metrics = "adaptation_metrics" in prime_adaptation
        print(f"  ‚Ä¢ M√©tricas de adaptaci√≥n: {'‚úÖ' if has_metrics else '‚ùå'}")

        # 3. Verificar diferenciaci√≥n PRIME vs LONGEVITY
        different_lengths = len(prime_adaptation["adapted_message"]) != len(
            longevity_adaptation["adapted_message"]
        )
        print(
            f"  ‚Ä¢ Diferenciaci√≥n PRIME/LONGEVITY: {'‚úÖ' if different_lengths else '‚ùå'}"
        )

        # 4. Verificar estructura de respuesta
        has_standard_fields = all(
            key in prime_adaptation
            for key in [
                "adapted_message",
                "original_message",
                "program_type",
                "agent_id",
            ]
        )
        print(
            f"  ‚Ä¢ Estructura est√°ndar de respuesta: {'‚úÖ' if has_standard_fields else '‚ùå'}"
        )

        # 5. Verificar agente_id
        correct_agent_id = prime_adaptation.get("agent_id") == "VOLT"
        print(f"  ‚Ä¢ Agent ID correcto (VOLT): {'‚úÖ' if correct_agent_id else '‚ùå'}")

        # An√°lisis comparativo con patr√≥n BLAZE
        print(f"\nüîç An√°lisis Comparativo:")
        print(
            f"  ‚Ä¢ PRIME - Longitud: {len(prime_adaptation['adapted_message'])} caracteres"
        )
        print(
            f"  ‚Ä¢ LONGEVITY - Longitud: {len(longevity_adaptation['adapted_message'])} caracteres"
        )
        print(
            f"  ‚Ä¢ Diferencia: {abs(len(prime_adaptation['adapted_message']) - len(longevity_adaptation['adapted_message']))} caracteres"
        )

        # Verificar palabras clave espec√≠ficas de VOLT
        print(f"\nüéØ Palabras Clave VOLT (Anal√≠tico/Detective):")
        prime_msg = prime_adaptation["adapted_message"].lower()
        longevity_msg = longevity_adaptation["adapted_message"].lower()

        analytical_keywords = [
            "datos",
            "an√°lisis",
            "patr√≥n",
            "tendencia",
            "correlaci√≥n",
        ]
        detective_keywords = ["identifica", "revela", "indica", "sugiere", "observa"]

        prime_analytical = [kw for kw in analytical_keywords if kw in prime_msg]
        longevity_analytical = [kw for kw in analytical_keywords if kw in longevity_msg]
        prime_detective = [kw for kw in detective_keywords if kw in prime_msg]
        longevity_detective = [kw for kw in detective_keywords if kw in longevity_msg]

        print(f"  ‚Ä¢ PRIME - T√©rminos anal√≠ticos: {prime_analytical}")
        print(f"  ‚Ä¢ LONGEVITY - T√©rminos anal√≠ticos: {longevity_analytical}")
        print(f"  ‚Ä¢ PRIME - T√©rminos detectivescos: {prime_detective}")
        print(f"  ‚Ä¢ LONGEVITY - T√©rminos detectivescos: {longevity_detective}")

        print("\n" + "=" * 60)
        print("üéâ VOLT PersonalityAdapter - Prueba Estandarizada Completada")
        print("‚úÖ VOLT sigue el patr√≥n est√°ndar de PersonalityAdapter")
        print("‚úÖ Integraci√≥n consistente con BLAZE, SAGE, y otros agentes")
        print("‚úÖ Personalidad INTP (The Thinker) preservada correctamente")
        print("‚úÖ Adaptaciones diferenciadas por programa (PRIME/LONGEVITY)")
        print("\nüìù VOLT est√° ESTANDARIZADO para FASE 9.1 ‚ú®")

        return True

    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    asyncio.run(test_volt_personality_standardized())
