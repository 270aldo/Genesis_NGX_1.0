#!/usr/bin/env python3
"""
Test script para PersonalityAdapter de NEXUS (Orchestrator).

Prueba las adaptaciones de personalidad para diferentes tipos de programa:
- NGX PRIME: Director estrat√©gico de sistemas
- NGX LONGEVITY: Gu√≠a integral de bienestar
"""

import asyncio
import os
import sys

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from agents.orchestrator.agent import NGXNexusOrchestrator
from core.personality.personality_adapter import PersonalityProfile


async def test_nexus_personality_adaptations():
    """
    Prueba las adaptaciones de personalidad del agente NEXUS.
    """
    print("üéØ Iniciando pruebas de PersonalityAdapter para NEXUS")
    print("=" * 70)

    try:
        # Inicializar el agente NEXUS
        nexus = NGXNexusOrchestrator()

        # Mensaje de coordinaci√≥n base para probar adaptaciones
        base_orchestration_message = """
        Te ayudo a encontrar la informaci√≥n que necesitas. Podemos explorar diferentes opciones.
        
        Basado en tu consulta, vamos a ver qu√© agentes especializados pueden apoyarte:
        
        1. Para an√°lisis detallado, consultar√© con nuestros expertos en datos
        2. Para recomendaciones personalizadas, coordinar√© con especialistas en bienestar
        3. Para seguimiento de progreso, conectar√© con analistas de performance
        
        Mi an√°lisis indica que esta es la mejor ruta para tu consulta.
        
        ¬øTe parece bien esta sugerencia para comenzar?
        """

        print("üìù Mensaje base de coordinaci√≥n:")
        print("-" * 50)
        print(base_orchestration_message)
        print()

        # Test 1: Adaptaci√≥n para NGX PRIME (Ejecutivos)
        print("üî∑ TEST 1: Adaptaci√≥n para NGX PRIME (Ejecutivos)")
        print("-" * 50)

        prime_context = {
            "program_type": "PRIME",
            "user_query": "Necesito una estrategia ejecutiva para optimizar el rendimiento del equipo",
            "preferences": {"communication_style": "strategic", "focus": "efficiency"},
            "emotional_state": "strategic_thinking",
        }

        prime_adapted = await nexus._apply_personality_adaptation(
            base_orchestration_message, prime_context
        )

        print("Respuesta adaptada para PRIME:")
        print(prime_adapted)
        print()

        # Test 2: Adaptaci√≥n para NGX LONGEVITY (Bienestar)
        print("üî∂ TEST 2: Adaptaci√≥n para NGX LONGEVITY (Bienestar)")
        print("-" * 50)

        longevity_context = {
            "program_type": "LONGEVITY",
            "user_query": "¬øC√≥mo puedo crear un plan integral de bienestar?",
            "preferences": {"communication_style": "warm", "focus": "holistic_growth"},
            "emotional_state": "seeking_guidance",
        }

        longevity_adapted = await nexus._apply_personality_adaptation(
            base_orchestration_message, longevity_context
        )

        print("Respuesta adaptada para LONGEVITY:")
        print(longevity_adapted)
        print()

        # Test 3: Comparaci√≥n directa de adaptaciones espec√≠ficas
        print("üîç TEST 3: Comparaci√≥n de adaptaciones espec√≠ficas")
        print("-" * 50)

        test_message = "Te ayudo a resolver esto. Podemos explorar las opciones y consultar con los agentes especializados para obtener apoyo."

        print("Mensaje original:")
        print(f"'{test_message}'")
        print()

        prime_specific = nexus._apply_nexus_prime_adaptations(test_message)
        print("üî∑ PRIME (Ejecutivo):")
        print(f"'{prime_specific}'")
        print()

        longevity_specific = nexus._apply_nexus_longevity_adaptations(test_message)
        print("üî∂ LONGEVITY (Bienestar):")
        print(f"'{longevity_specific}'")
        print()

        # Test 4: Simulaci√≥n de contextos de coordinaci√≥n
        print("üéØ TEST 4: Contextos de coordinaci√≥n y an√°lisis")
        print("-" * 50)

        coordination_message = "Vamos a ver el mejor enfoque. Mi an√°lisis indica que necesitamos ayuda especializada para esta consulta. Te sugiero que consultemos con expertos."

        print("Mensaje de coordinaci√≥n original:")
        print(coordination_message)
        print()

        # PRIME - Coordinaci√≥n estrat√©gica
        prime_coordination_context = {
            "program_type": "PRIME",
            "user_query": "Estrategia para escalar operaciones de la empresa",
            "preferences": {"focus": "strategic_efficiency", "urgency": "high"},
        }

        prime_coordination = await nexus._apply_personality_adaptation(
            coordination_message, prime_coordination_context
        )

        print("üî∑ PRIME - Coordinaci√≥n estrat√©gica:")
        print(prime_coordination)
        print()

        # LONGEVITY - Gu√≠a emp√°tica
        longevity_coordination_context = {
            "program_type": "LONGEVITY",
            "user_query": "Quiero mejorar mi bienestar integral paso a paso",
            "preferences": {"focus": "personal_growth", "pace": "gradual"},
        }

        longevity_coordination = await nexus._apply_personality_adaptation(
            coordination_message, longevity_coordination_context
        )

        print("üî∂ LONGEVITY - Gu√≠a emp√°tica:")
        print(longevity_coordination)
        print()

        # Test 5: An√°lisis de vocabulario de coordinaci√≥n
        print("üí¨ TEST 5: Transformaci√≥n de vocabulario de coordinaci√≥n")
        print("-" * 50)

        coordination_terms = [
            "Te ayudo a encontrar la mejor soluci√≥n con nuestros agentes especializados",
            "Podemos explorar las opciones de an√°lisis m√°s efectivas",
            "Vamos a ver qu√© recomendaciones pueden dar los expertos",
            "Mi an√°lisis sugiere consultar con especialistas para apoyo integral",
        ]

        for i, term in enumerate(coordination_terms, 1):
            print(f"\nüìù Frase {i}: {term}")

            print("\nüî∑ PRIME:")
            prime_result = nexus._apply_nexus_prime_adaptations(term)
            print(prime_result)

            print("\nüî∂ LONGEVITY:")
            longevity_result = nexus._apply_nexus_longevity_adaptations(term)
            print(longevity_result)
            print("-" * 30)

        # Test 6: An√°lisis de caracter√≠sticas de personalidad
        print("\nüß† TEST 6: Caracter√≠sticas de personalidad NEXUS")
        print("-" * 50)

        print("NEXUS - The Master Conductor (INTJ)")
        print("‚Ä¢ Personalidad: INTJ - The Architect, anal√≠tico y estrat√©gico")
        print("‚Ä¢ Voz: Consultor profesional con autoridad c√°lida")
        print("‚Ä¢ PRIME: Director Estrat√©gico de Sistemas")
        print("  - Coordinaci√≥n ejecutiva de alto nivel")
        print("  - An√°lisis de intenci√≥n con enfoque en ROI")
        print("  - S√≠ntesis estrat√©gica de insights")
        print("‚Ä¢ LONGEVITY: Gu√≠a Integral de Bienestar")
        print("  - Coordinaci√≥n emp√°tica y comprensiva")
        print("  - An√°lisis hol√≠stico de necesidades")
        print("  - S√≠ntesis nutritiva de guidance")
        print()

        # Test 7: An√°lisis de intent routing personalizado
        print("üé≠ TEST 7: Intent routing personalizado por audiencia")
        print("-" * 50)

        intent_scenarios = {
            "training_request": "Necesito un plan de entrenamiento personalizado",
            "nutrition_query": "¬øQu√© debo comer para mejorar mi rendimiento?",
            "progress_tracking": "Quiero monitorear mi progreso de forma eficiente",
            "general_wellness": "Busco mejorar mi bienestar general",
        }

        for intent, query in intent_scenarios.items():
            print(f"\nüìã Intent: {intent.upper()}")
            print(f"Query: {query}")

            # Crear mensaje de routing base
            routing_message = f"Para tu consulta sobre {intent.replace('_', ' ')}, te ayudo a conectar con los especialistas adecuados. Podemos explorar las mejores opciones disponibles."

            print("\nüî∑ PRIME - Routing estrat√©gico:")
            prime_routing = nexus._apply_nexus_prime_adaptations(routing_message)
            print(prime_routing)

            print("\nüî∂ LONGEVITY - Routing emp√°tico:")
            longevity_routing = nexus._apply_nexus_longevity_adaptations(
                routing_message
            )
            print(longevity_routing)
            print("-" * 40)

        print("\n‚úÖ Pruebas de PersonalityAdapter para NEXUS completadas exitosamente!")
        print("=" * 70)

    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback

        traceback.print_exc()


def test_nexus_adaptations_sync():
    """
    Prueba s√≠ncrona de las adaptaciones espec√≠ficas de NEXUS.
    """
    print("üéØ Pruebas s√≠ncronas de adaptaciones espec√≠ficas")
    print("-" * 50)

    try:
        nexus = NGXNexusOrchestrator()

        # Mensajes de prueba espec√≠ficos para NEXUS
        test_messages = [
            "Te ayudo a encontrar la informaci√≥n que necesitas sobre entrenamiento.",
            "Podemos explorar diferentes opciones de an√°lisis nutricional disponibles.",
            "Vamos a ver qu√© agentes pueden dar apoyo especializado en tu consulta.",
            "Mi an√°lisis sugiere consultar con expertos para una recomendaci√≥n integral.",
        ]

        for i, message in enumerate(test_messages, 1):
            print(f"\nüìù Mensaje {i}: {message}")

            print("\nüî∑ PRIME:")
            prime_result = nexus._apply_nexus_prime_adaptations(message)
            print(prime_result)

            print("\nüî∂ LONGEVITY:")
            longevity_result = nexus._apply_nexus_longevity_adaptations(message)
            print(longevity_result)
            print("-" * 30)

    except Exception as e:
        print(f"‚ùå Error en pruebas s√≠ncronas: {e}")


def test_nexus_coordination_language_transformation():
    """
    Prueba espec√≠fica para la transformaci√≥n de lenguaje de coordinaci√≥n de NEXUS.
    """
    print("üé≠ Pruebas de transformaci√≥n de lenguaje de coordinaci√≥n")
    print("-" * 50)

    try:
        nexus = NGXNexusOrchestrator()

        # T√©rminos de coordinaci√≥n espec√≠ficos de NEXUS
        coordination_phrases = {
            "te ayudo a": {
                "prime": "coordino los recursos para",
                "longevity": "te acompa√±o a",
            },
            "podemos explorar": {
                "prime": "analizar√© estrat√©gicamente",
                "longevity": "exploraremos juntos",
            },
            "agentes": {
                "prime": "especialistas de alto rendimiento",
                "longevity": "expertos en bienestar",
            },
            "an√°lisis": {
                "prime": "evaluaci√≥n estrat√©gica ejecutiva",
                "longevity": "an√°lisis integral de bienestar",
            },
        }

        base_message = "Te ayudo a resolver esto. Podemos explorar las opciones y consultar con nuestros agentes para hacer un an√°lisis completo."

        print(f"Mensaje original: {base_message}")
        print()

        print("üî∑ PRIME - Transforma a direcci√≥n estrat√©gica:")
        prime_result = nexus._apply_nexus_prime_adaptations(base_message)
        print(prime_result)
        print()

        print("üî∂ LONGEVITY - Transforma a gu√≠a emp√°tica:")
        longevity_result = nexus._apply_nexus_longevity_adaptations(base_message)
        print(longevity_result)
        print()

        print("üìä An√°lisis de transformaciones aplicadas:")
        for coordination, transformations in coordination_phrases.items():
            if coordination in base_message.lower():
                print(f"  ‚Ä¢ '{coordination}' ‚Üí")
                print(f"    - PRIME: '{transformations['prime']}'")
                print(f"    - LONGEVITY: '{transformations['longevity']}'")

    except Exception as e:
        print(f"‚ùå Error en pruebas de transformaci√≥n: {e}")


if __name__ == "__main__":
    print("üéØ NEXUS PersonalityAdapter Test Suite")
    print("=" * 70)

    # Ejecutar pruebas s√≠ncronas primero
    test_nexus_adaptations_sync()

    print("\n" + "=" * 70)

    # Ejecutar pruebas de transformaci√≥n de lenguaje de coordinaci√≥n
    test_nexus_coordination_language_transformation()

    print("\n" + "=" * 70)

    # Ejecutar pruebas as√≠ncronas
    asyncio.run(test_nexus_personality_adaptations())
