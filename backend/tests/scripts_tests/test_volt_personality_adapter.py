#!/usr/bin/env python3
"""
Script de prueba para VOLT PersonalityAdapter.

Prueba las adaptaciones de personalidad espec√≠ficas de VOLT para
diferentes tipos de programa (PRIME vs LONGEVITY).
"""

import asyncio
import sys
import os
import json
from pathlib import Path

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from agents.volt_biometrics_insight_engine.agent import BiometricsInsightEngine
from core.logging_config import setup_logging


async def test_volt_personality_adapter():
    """
    Prueba las adaptaciones de personalidad de VOLT para diferentes programas.
    """
    print("üî¨ VOLT PersonalityAdapter - Sistema de Pruebas")
    print("=" * 60)

    # Configurar logging
    setup_logging()

    try:
        # Crear instancia del agente VOLT
        print("üìä Inicializando VOLT Biometrics Insight Engine...")
        volt_agent = BiometricsInsightEngine()
        print("‚úÖ VOLT inicializado correctamente")

        # Respuesta de ejemplo de VOLT
        sample_response = """
        Bas√°ndome en el an√°lisis de tus datos biom√©tricos, he identificado varios patrones interesantes. 
        Tu variabilidad card√≠aca muestra una tendencia ascendente, lo que indica mejora en la capacidad 
        adaptativa de tu sistema nervioso. Los datos de sue√±o revelan una optimizaci√≥n en la eficiencia, 
        con incrementos en sue√±o profundo. Las fluctuaciones de glucosa muestran mayor estabilidad, 
        sugiriendo una adaptaci√≥n metab√≥lica positiva. 
        
        Recomiendo continuar con el protocolo actual y considerar ajustes espec√≠ficos en la ventana 
        de alimentaci√≥n para maximizar estos beneficios.
        """

        # Perfiles de usuario para diferentes programas
        prime_profile = {
            "age": 42,
            "goals": [
                "optimizaci√≥n de performance",
                "mejora de productividad",
                "an√°lisis de ROI en salud",
            ],
            "occupation": "CEO",
            "preferences": {
                "communication_style": "executive",
                "data_format": "high_level_insights",
            },
        }

        longevity_profile = {
            "age": 55,
            "goals": [
                "bienestar a largo plazo",
                "prevenci√≥n de enfermedades",
                "calidad de vida",
            ],
            "lifestyle": "wellness_focused",
            "preferences": {
                "communication_style": "educational",
                "data_format": "detailed_explanations",
            },
        }

        print("\nüéØ Prueba 1: VOLT + PRIME (Ejecutivo)")
        print("-" * 40)

        prime_adaptation = await volt_agent.adapt_response_to_program(
            response=sample_response,
            user_profile=prime_profile,
            conversation_context={"session_type": "executive_briefing"},
        )

        print("üîπ Respuesta Original:")
        print(sample_response[:150] + "...")
        print("\nüîπ Respuesta Adaptada PRIME:")
        print(prime_adaptation["adapted_message"][:300] + "...")
        print(f"\nüìà Programa Detectado: {prime_adaptation.get('program_type', 'N/A')}")
        print(
            f"üß† Personalidad: {prime_adaptation.get('volt_personality', {}).get('communication_style', 'N/A')}"
        )

        print("\n" + "=" * 60)
        print("üå± Prueba 2: VOLT + LONGEVITY (Bienestar)")
        print("-" * 40)

        longevity_adaptation = await volt_agent.adapt_response_to_program(
            response=sample_response,
            user_profile=longevity_profile,
            conversation_context={"session_type": "wellness_consultation"},
        )

        print("üîπ Respuesta Original:")
        print(sample_response[:150] + "...")
        print("\nüîπ Respuesta Adaptada LONGEVITY:")
        print(longevity_adaptation["adapted_message"][:300] + "...")
        print(
            f"\nüåø Programa Detectado: {longevity_adaptation.get('program_type', 'N/A')}"
        )
        print(
            f"üß† Personalidad: {longevity_adaptation.get('volt_personality', {}).get('communication_style', 'N/A')}"
        )

        print("\n" + "=" * 60)
        print("üß™ Prueba 3: Comparaci√≥n de Adaptaciones")
        print("-" * 40)

        # Mostrar m√©tricas de adaptaci√≥n
        if "adaptation_metrics" in prime_adaptation:
            print("üìä M√©tricas PRIME:")
            metrics = prime_adaptation["adaptation_metrics"]
            print(
                f"  ‚Ä¢ Adaptaciones aplicadas: {metrics.get('adaptations_applied', [])}"
            )
            print(f"  ‚Ä¢ Confianza: {metrics.get('confidence_score', 0):.2f}")

        if "adaptation_metrics" in longevity_adaptation:
            print("\nüìä M√©tricas LONGEVITY:")
            metrics = longevity_adaptation["adaptation_metrics"]
            print(
                f"  ‚Ä¢ Adaptaciones aplicadas: {metrics.get('adaptations_applied', [])}"
            )
            print(f"  ‚Ä¢ Confianza: {metrics.get('confidence_score', 0):.2f}")

        # An√°lisis de diferencias
        print("\nüîç An√°lisis de Diferencias:")
        prime_length = len(prime_adaptation["adapted_message"])
        longevity_length = len(longevity_adaptation["adapted_message"])

        print(f"  ‚Ä¢ Longitud PRIME: {prime_length} caracteres")
        print(f"  ‚Ä¢ Longitud LONGEVITY: {longevity_length} caracteres")
        print(f"  ‚Ä¢ Diferencia: {abs(prime_length - longevity_length)} caracteres")

        # Verificar palabras clave espec√≠ficas
        print("\nüéØ Palabras Clave Detectadas:")
        prime_msg = prime_adaptation["adapted_message"].lower()
        longevity_msg = longevity_adaptation["adapted_message"].lower()

        executive_keywords = ["kpi", "roi", "protocolo", "optimizaci√≥n", "estrat√©gico"]
        wellness_keywords = [
            "bienestar",
            "sostenible",
            "gradual",
            "equilibrio",
            "longevidad",
        ]

        prime_keywords_found = [kw for kw in executive_keywords if kw in prime_msg]
        longevity_keywords_found = [
            kw for kw in wellness_keywords if kw in longevity_msg
        ]

        print(f"  ‚Ä¢ PRIME (ejecutivo): {prime_keywords_found}")
        print(f"  ‚Ä¢ LONGEVITY (bienestar): {longevity_keywords_found}")

        print("\n" + "=" * 60)
        print("üéâ VOLT PersonalityAdapter - Pruebas Completadas")
        print("‚úÖ Integraci√≥n PersonalityAdapter verificada exitosamente")
        print("‚úÖ Adaptaciones PRIME y LONGEVITY funcionando correctamente")
        print("‚úÖ Personalidad INTP (The Thinker) preservada en ambos casos")
        print("\nüìù VOLT est√° listo para FASE 9.1 - PersonalityAdapter ‚ú®")

        return True

    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback

        traceback.print_exc()
        return False


async def test_volt_conversation_personality():
    """
    Prueba las skills conversacionales de VOLT con adaptaciones de personalidad.
    """
    print("\nüó£Ô∏è Prueba de Skills Conversacionales con PersonalityAdapter")
    print("-" * 60)

    try:
        volt_agent = BiometricsInsightEngine()

        # Importar esquemas necesarios
        from agents.volt_biometrics_insight_engine.schemas import (
            BiometricAnalysisConversationInput,
        )

        # Datos de prueba
        conversation_input = BiometricAnalysisConversationInput(
            user_input="¬øQu√© me dice mi HRV sobre mi nivel de estr√©s?",
            biometric_context={
                "hrv": {"current_value": 45, "trend": "ascending", "percentile": 75}
            },
            conversation_history=[
                {"role": "user", "content": "Quiero entender mejor mis datos"},
                {
                    "role": "assistant",
                    "content": "Te ayudo a analizar tus m√©tricas biom√©tricas",
                },
            ],
        )

        # Ejecutar skill conversacional
        conversation_result = await volt_agent._skill_biometric_analysis_conversation(
            conversation_input
        )

        print("üîπ Respuesta Conversacional Base:")
        print(conversation_result.response[:200] + "...")

        # Adaptar para PRIME
        prime_adapted = await volt_agent.adapt_response_to_program(
            response=conversation_result.response,
            user_profile={
                "goals": ["performance optimization"],
                "occupation": "executive",
            },
            conversation_context={"type": "hrv_analysis"},
        )

        print("\nüîπ Conversaci√≥n Adaptada PRIME:")
        print(prime_adapted["adapted_message"][:200] + "...")

        # Adaptar para LONGEVITY
        longevity_adapted = await volt_agent.adapt_response_to_program(
            response=conversation_result.response,
            user_profile={
                "goals": ["wellness", "stress management"],
                "lifestyle": "health_focused",
            },
            conversation_context={"type": "hrv_analysis"},
        )

        print("\nüîπ Conversaci√≥n Adaptada LONGEVITY:")
        print(longevity_adapted["adapted_message"][:200] + "...")

        print(
            "\n‚úÖ Skills conversacionales con PersonalityAdapter funcionando correctamente"
        )

    except Exception as e:
        print(f"‚ùå Error en prueba conversacional: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":

    async def main():
        await test_volt_personality_adapter()
        await test_volt_conversation_personality()

    asyncio.run(main())
